
FreeRTOS_TasksAndMutexes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800454c  0800454c  0000554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045dc  080045dc  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080045dc  080045dc  000055dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e4  080045e4  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e4  080045e4  000055e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045e8  080045e8  000055e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080045ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004200  20000060  0800464c  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004260  0800464c  00006260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144fe  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea4  00000000  00000000  0001a58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0001d438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d92  00000000  00000000  0001e5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ff1  00000000  00000000  0001f33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012cf7  00000000  00000000  0003732b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096c77  00000000  00000000  0004a022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0c99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc4  00000000  00000000  000e0cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e58a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004534 	.word	0x08004534

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004534 	.word	0x08004534

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000007c 	.word	0x2000007c
 800053c:	2000011c 	.word	0x2000011c

08000540 <main>:

TaskProfiler Thread_1_Profiler,Thread_2_Profiler,Default_Thread_Profiler;


int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b098      	sub	sp, #96	@ 0x60
 8000544:	af00      	add	r7, sp, #0


  HAL_Init();
 8000546:	f000 facf 	bl	8000ae8 <HAL_Init>


  SystemClock_Config();
 800054a:	f000 f859 	bl	8000600 <SystemClock_Config>


  MX_GPIO_Init();
 800054e:	f000 f8eb 	bl	8000728 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f8bf 	bl	80006d4 <MX_USART2_UART_Init>

  osMutexDef(uart_mutex);
 8000556:	2300      	movs	r3, #0
 8000558:	65bb      	str	r3, [r7, #88]	@ 0x58
 800055a:	2300      	movs	r3, #0
 800055c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uart_mutexHandle = osMutexCreate(osMutex(uart_mutex));
 800055e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000562:	4618      	mov	r0, r3
 8000564:	f001 ffe9 	bl	800253a <osMutexCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a1e      	ldr	r2, [pc, #120]	@ (80005e4 <main+0xa4>)
 800056c:	6013      	str	r3, [r2, #0]


  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800056e:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <main+0xa8>)
 8000570:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000582:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f001 ff8a 	bl	80024a2 <osThreadCreate>
 800058e:	4603      	mov	r3, r0
 8000590:	4a16      	ldr	r2, [pc, #88]	@ (80005ec <main+0xac>)
 8000592:	6013      	str	r3, [r2, #0]

  /* definition and creation of Thread1 */
  osThreadDef(Thread1, Thread1Func, osPriorityNormal, 0, 128);
 8000594:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <main+0xb0>)
 8000596:	f107 0420 	add.w	r4, r7, #32
 800059a:	461d      	mov	r5, r3
 800059c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Thread1Handle = osThreadCreate(osThread(Thread1), NULL);
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 ff77 	bl	80024a2 <osThreadCreate>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a0f      	ldr	r2, [pc, #60]	@ (80005f4 <main+0xb4>)
 80005b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Thread2 */
  osThreadDef(Thread2, Thread2Func, osPriorityNormal, 0, 128);
 80005ba:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <main+0xb8>)
 80005bc:	1d3c      	adds	r4, r7, #4
 80005be:	461d      	mov	r5, r3
 80005c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Thread2Handle = osThreadCreate(osThread(Thread2), NULL);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 ff66 	bl	80024a2 <osThreadCreate>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a08      	ldr	r2, [pc, #32]	@ (80005fc <main+0xbc>)
 80005da:	6013      	str	r3, [r2, #0]


  osKernelStart();
 80005dc:	f001 ff5a 	bl	8002494 <osKernelStart>


  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0xa0>
 80005e4:	20000370 	.word	0x20000370
 80005e8:	08004558 	.word	0x08004558
 80005ec:	20000364 	.word	0x20000364
 80005f0:	0800457c 	.word	0x0800457c
 80005f4:	20000368 	.word	0x20000368
 80005f8:	080045a0 	.word	0x080045a0
 80005fc:	2000036c 	.word	0x2000036c

08000600 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	@ 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fea0 	bl	8004354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a27      	ldr	r2, [pc, #156]	@ (80006cc <SystemClock_Config+0xcc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	@ (80006d0 <SystemClock_Config+0xd0>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000670:	2310      	movs	r3, #16
 8000672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000674:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000678:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067a:	2304      	movs	r3, #4
 800067c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067e:	2304      	movs	r3, #4
 8000680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fcf0 	bl	800106c <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000692:	f000 f8d1 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ff52 	bl	800155c <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006be:	f000 f8bb 	bl	8000838 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	@ 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <MX_USART2_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 800070c:	f001 fbe6 	bl	8001edc <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f88f 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000031c 	.word	0x2000031c
 8000724:	40004400 	.word	0x40004400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <MX_GPIO_Init+0x98>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a1e      	ldr	r2, [pc, #120]	@ (80007c0 <MX_GPIO_Init+0x98>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <MX_GPIO_Init+0x98>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <MX_GPIO_Init+0x98>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a17      	ldr	r2, [pc, #92]	@ (80007c0 <MX_GPIO_Init+0x98>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <MX_GPIO_Init+0x98>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2120      	movs	r1, #32
 800077a:	4812      	ldr	r0, [pc, #72]	@ (80007c4 <MX_GPIO_Init+0x9c>)
 800077c:	f000 fc5c 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <MX_GPIO_Init+0xa0>)
 8000796:	f000 facb 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800079a:	2320      	movs	r3, #32
 800079c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_GPIO_Init+0x9c>)
 80007b2:	f000 fabd 	bl	8000d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007b6:	bf00      	nop
 80007b8:	3720      	adds	r7, #32
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020000 	.word	0x40020000
 80007c8:	40020800 	.word	0x40020800

080007cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 Default_Thread_Profiler++;
 80007d4:	4b02      	ldr	r3, [pc, #8]	@ (80007e0 <StartDefaultTask+0x14>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a01      	ldr	r2, [pc, #4]	@ (80007e0 <StartDefaultTask+0x14>)
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	e7f9      	b.n	80007d4 <StartDefaultTask+0x8>
 80007e0:	2000037c 	.word	0x2000037c

080007e4 <Thread1Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread1Func */
void Thread1Func(void const * argument)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thread1Func */
  /* Infinite loop */
  for(;;)
  {
	  Thread_1_Profiler++;
 80007ec:	4b02      	ldr	r3, [pc, #8]	@ (80007f8 <Thread1Func+0x14>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a01      	ldr	r2, [pc, #4]	@ (80007f8 <Thread1Func+0x14>)
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	e7f9      	b.n	80007ec <Thread1Func+0x8>
 80007f8:	20000374 	.word	0x20000374

080007fc <Thread2Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread2Func */
void Thread2Func(void const * argument)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thread2Func */
  /* Infinite loop */
  for(;;)
  {
	  Thread_2_Profiler++;
 8000804:	4b02      	ldr	r3, [pc, #8]	@ (8000810 <Thread2Func+0x14>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	4a01      	ldr	r2, [pc, #4]	@ (8000810 <Thread2Func+0x14>)
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	e7f9      	b.n	8000804 <Thread2Func+0x8>
 8000810:	20000378 	.word	0x20000378

08000814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a04      	ldr	r2, [pc, #16]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d101      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000826:	f000 f981 	bl	8000b2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40000400 	.word	0x40000400

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <Error_Handler+0x8>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <HAL_MspInit+0x54>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	4a11      	ldr	r2, [pc, #68]	@ (8000898 <HAL_MspInit+0x54>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000858:	6453      	str	r3, [r2, #68]	@ 0x44
 800085a:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <HAL_MspInit+0x54>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <HAL_MspInit+0x54>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <HAL_MspInit+0x54>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	@ 0x40
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <HAL_MspInit+0x54>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	f06f 0001 	mvn.w	r0, #1
 800088a:	f000 fa27 	bl	8000cdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a19      	ldr	r2, [pc, #100]	@ (8000920 <HAL_UART_MspInit+0x84>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d12b      	bne.n	8000916 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	4a17      	ldr	r2, [pc, #92]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008f6:	230c      	movs	r3, #12
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000906:	2307      	movs	r3, #7
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_UART_MspInit+0x8c>)
 8000912:	f000 fa0d 	bl	8000d30 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40004400 	.word	0x40004400
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000

0800092c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4b33      	ldr	r3, [pc, #204]	@ (8000a10 <HAL_InitTick+0xe4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	4a32      	ldr	r2, [pc, #200]	@ (8000a10 <HAL_InitTick+0xe4>)
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	6413      	str	r3, [r2, #64]	@ 0x40
 800094c:	4b30      	ldr	r3, [pc, #192]	@ (8000a10 <HAL_InitTick+0xe4>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	f003 0302 	and.w	r3, r3, #2
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000958:	f107 0210 	add.w	r2, r7, #16
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f001 f81a 	bl	800199c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000968:	6a3b      	ldr	r3, [r7, #32]
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800096c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800096e:	2b00      	cmp	r3, #0
 8000970:	d103      	bne.n	800097a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000972:	f000 ffeb 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8000976:	6378      	str	r0, [r7, #52]	@ 0x34
 8000978:	e004      	b.n	8000984 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800097a:	f000 ffe7 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 800097e:	4603      	mov	r3, r0
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000986:	4a23      	ldr	r2, [pc, #140]	@ (8000a14 <HAL_InitTick+0xe8>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	0c9b      	lsrs	r3, r3, #18
 800098e:	3b01      	subs	r3, #1
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000992:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <HAL_InitTick+0xec>)
 8000994:	4a21      	ldr	r2, [pc, #132]	@ (8000a1c <HAL_InitTick+0xf0>)
 8000996:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000998:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <HAL_InitTick+0xec>)
 800099a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800099e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <HAL_InitTick+0xec>)
 80009a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <HAL_InitTick+0xec>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <HAL_InitTick+0xec>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <HAL_InitTick+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80009b8:	4817      	ldr	r0, [pc, #92]	@ (8000a18 <HAL_InitTick+0xec>)
 80009ba:	f001 f821 	bl	8001a00 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d11b      	bne.n	8000a04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80009cc:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <HAL_InitTick+0xec>)
 80009ce:	f001 f871 	bl	8001ab4 <HAL_TIM_Base_Start_IT>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d111      	bne.n	8000a04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009e0:	201d      	movs	r0, #29
 80009e2:	f000 f997 	bl	8000d14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d808      	bhi.n	80009fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	201d      	movs	r0, #29
 80009f2:	f000 f973 	bl	8000cdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <HAL_InitTick+0xf4>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	e002      	b.n	8000a04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3738      	adds	r7, #56	@ 0x38
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	20000380 	.word	0x20000380
 8000a1c:	40000400 	.word	0x40000400
 8000a20:	20000004 	.word	0x20000004

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <TIM3_IRQHandler+0x10>)
 8000a62:	f001 f889 	bl	8001b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000380 	.word	0x20000380

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	@ (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000acc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a98:	f7ff ffea 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	@ (8000ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f003 fc4f 	bl	8004364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fd3b 	bl	8000540 <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ad8:	080045ec 	.word	0x080045ec
  ldr r2, =_sbss
 8000adc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ae0:	20004260 	.word	0x20004260

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f8d8 	bl	8000cc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f7ff ff08 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fe92 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	200003c8 	.word	0x200003c8

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	200003c8 	.word	0x200003c8

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	@ (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	@ (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	@ (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	@ 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ff4c 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cee:	f7ff ff61 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	6978      	ldr	r0, [r7, #20]
 8000cfa:	f7ff ffb1 	bl	8000c60 <NVIC_EncodePriority>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d04:	4611      	mov	r1, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff80 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff54 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	@ 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e159      	b.n	8001000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8148 	bne.w	8000ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d005      	beq.n	8000d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d130      	bne.n	8000de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d017      	beq.n	8000e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d123      	bne.n	8000e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	08da      	lsrs	r2, r3, #3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3208      	adds	r2, #8
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	69b9      	ldr	r1, [r7, #24]
 8000e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0203 	and.w	r2, r3, #3
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80a2 	beq.w	8000ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b57      	ldr	r3, [pc, #348]	@ (8001018 <HAL_GPIO_Init+0x2e8>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	4a56      	ldr	r2, [pc, #344]	@ (8001018 <HAL_GPIO_Init+0x2e8>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec6:	4b54      	ldr	r3, [pc, #336]	@ (8001018 <HAL_GPIO_Init+0x2e8>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed2:	4a52      	ldr	r2, [pc, #328]	@ (800101c <HAL_GPIO_Init+0x2ec>)
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a49      	ldr	r2, [pc, #292]	@ (8001020 <HAL_GPIO_Init+0x2f0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d019      	beq.n	8000f32 <HAL_GPIO_Init+0x202>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a48      	ldr	r2, [pc, #288]	@ (8001024 <HAL_GPIO_Init+0x2f4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0x1fe>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a47      	ldr	r2, [pc, #284]	@ (8001028 <HAL_GPIO_Init+0x2f8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00d      	beq.n	8000f2a <HAL_GPIO_Init+0x1fa>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a46      	ldr	r2, [pc, #280]	@ (800102c <HAL_GPIO_Init+0x2fc>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d007      	beq.n	8000f26 <HAL_GPIO_Init+0x1f6>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a45      	ldr	r2, [pc, #276]	@ (8001030 <HAL_GPIO_Init+0x300>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_GPIO_Init+0x1f2>
 8000f1e:	2304      	movs	r3, #4
 8000f20:	e008      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f26:	2303      	movs	r3, #3
 8000f28:	e004      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e002      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f32:	2300      	movs	r3, #0
 8000f34:	69fa      	ldr	r2, [r7, #28]
 8000f36:	f002 0203 	and.w	r2, r2, #3
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	4093      	lsls	r3, r2
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f44:	4935      	ldr	r1, [pc, #212]	@ (800101c <HAL_GPIO_Init+0x2ec>)
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f52:	4b38      	ldr	r3, [pc, #224]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f76:	4a2f      	ldr	r2, [pc, #188]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa0:	4a24      	ldr	r2, [pc, #144]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fa6:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fca:	4a1a      	ldr	r2, [pc, #104]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	2b0f      	cmp	r3, #15
 8001004:	f67f aea2 	bls.w	8000d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3724      	adds	r7, #36	@ 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40013800 	.word	0x40013800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40020800 	.word	0x40020800
 800102c:	40020c00 	.word	0x40020c00
 8001030:	40021000 	.word	0x40021000
 8001034:	40013c00 	.word	0x40013c00

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001054:	e003      	b.n	800105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e267      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d075      	beq.n	8001176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800108a:	4b88      	ldr	r3, [pc, #544]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b04      	cmp	r3, #4
 8001094:	d00c      	beq.n	80010b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001096:	4b85      	ldr	r3, [pc, #532]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d112      	bne.n	80010c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a2:	4b82      	ldr	r3, [pc, #520]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010ae:	d10b      	bne.n	80010c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b0:	4b7e      	ldr	r3, [pc, #504]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d05b      	beq.n	8001174 <HAL_RCC_OscConfig+0x108>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d157      	bne.n	8001174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e242      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d0:	d106      	bne.n	80010e0 <HAL_RCC_OscConfig+0x74>
 80010d2:	4b76      	ldr	r3, [pc, #472]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a75      	ldr	r2, [pc, #468]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e01d      	b.n	800111c <HAL_RCC_OscConfig+0xb0>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0x98>
 80010ea:	4b70      	ldr	r3, [pc, #448]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6f      	ldr	r2, [pc, #444]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b6d      	ldr	r3, [pc, #436]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a6c      	ldr	r2, [pc, #432]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e00b      	b.n	800111c <HAL_RCC_OscConfig+0xb0>
 8001104:	4b69      	ldr	r3, [pc, #420]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a68      	ldr	r2, [pc, #416]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 800110a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b66      	ldr	r3, [pc, #408]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a65      	ldr	r2, [pc, #404]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fd16 	bl	8000b54 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fd12 	bl	8000b54 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	@ 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e207      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0xc0>
 800114a:	e014      	b.n	8001176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fd02 	bl	8000b54 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fcfe 	bl	8000b54 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	@ 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e1f3      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	4b51      	ldr	r3, [pc, #324]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0xe8>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d063      	beq.n	800124a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001182:	4b4a      	ldr	r3, [pc, #296]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00b      	beq.n	80011a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118e:	4b47      	ldr	r3, [pc, #284]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001196:	2b08      	cmp	r3, #8
 8001198:	d11c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119a:	4b44      	ldr	r3, [pc, #272]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d116      	bne.n	80011d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a6:	4b41      	ldr	r3, [pc, #260]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_RCC_OscConfig+0x152>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d001      	beq.n	80011be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e1c7      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011be:	4b3b      	ldr	r3, [pc, #236]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4937      	ldr	r1, [pc, #220]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	e03a      	b.n	800124a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d020      	beq.n	800121e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011dc:	4b34      	ldr	r3, [pc, #208]	@ (80012b0 <HAL_RCC_OscConfig+0x244>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e2:	f7ff fcb7 	bl	8000b54 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ea:	f7ff fcb3 	bl	8000b54 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e1a8      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	4b2b      	ldr	r3, [pc, #172]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001208:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4925      	ldr	r1, [pc, #148]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
 800121c:	e015      	b.n	800124a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121e:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <HAL_RCC_OscConfig+0x244>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fc96 	bl	8000b54 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122c:	f7ff fc92 	bl	8000b54 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e187      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d036      	beq.n	80012c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d016      	beq.n	800128c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_RCC_OscConfig+0x248>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001264:	f7ff fc76 	bl	8000b54 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fc72 	bl	8000b54 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e167      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x200>
 800128a:	e01b      	b.n	80012c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_RCC_OscConfig+0x248>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001292:	f7ff fc5f 	bl	8000b54 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001298:	e00e      	b.n	80012b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800129a:	f7ff fc5b 	bl	8000b54 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d907      	bls.n	80012b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e150      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
 80012ac:	40023800 	.word	0x40023800
 80012b0:	42470000 	.word	0x42470000
 80012b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b8:	4b88      	ldr	r3, [pc, #544]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ea      	bne.n	800129a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 8097 	beq.w	8001400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d6:	4b81      	ldr	r3, [pc, #516]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b7d      	ldr	r3, [pc, #500]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	4a7c      	ldr	r2, [pc, #496]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f2:	4b7a      	ldr	r3, [pc, #488]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fe:	2301      	movs	r3, #1
 8001300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	4b77      	ldr	r3, [pc, #476]	@ (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d118      	bne.n	8001340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130e:	4b74      	ldr	r3, [pc, #464]	@ (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a73      	ldr	r2, [pc, #460]	@ (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131a:	f7ff fc1b 	bl	8000b54 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001322:	f7ff fc17 	bl	8000b54 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e10c      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	4b6a      	ldr	r3, [pc, #424]	@ (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x2ea>
 8001348:	4b64      	ldr	r3, [pc, #400]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800134a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800134c:	4a63      	ldr	r2, [pc, #396]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6713      	str	r3, [r2, #112]	@ 0x70
 8001354:	e01c      	b.n	8001390 <HAL_RCC_OscConfig+0x324>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b05      	cmp	r3, #5
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x30c>
 800135e:	4b5f      	ldr	r3, [pc, #380]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001362:	4a5e      	ldr	r2, [pc, #376]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6713      	str	r3, [r2, #112]	@ 0x70
 800136a:	4b5c      	ldr	r3, [pc, #368]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800136c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136e:	4a5b      	ldr	r2, [pc, #364]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6713      	str	r3, [r2, #112]	@ 0x70
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0x324>
 8001378:	4b58      	ldr	r3, [pc, #352]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800137c:	4a57      	ldr	r2, [pc, #348]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800137e:	f023 0301 	bic.w	r3, r3, #1
 8001382:	6713      	str	r3, [r2, #112]	@ 0x70
 8001384:	4b55      	ldr	r3, [pc, #340]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001388:	4a54      	ldr	r2, [pc, #336]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800138a:	f023 0304 	bic.w	r3, r3, #4
 800138e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d015      	beq.n	80013c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001398:	f7ff fbdc 	bl	8000b54 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139e:	e00a      	b.n	80013b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a0:	f7ff fbd8 	bl	8000b54 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e0cb      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b6:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0ee      	beq.n	80013a0 <HAL_RCC_OscConfig+0x334>
 80013c2:	e014      	b.n	80013ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fbc6 	bl	8000b54 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	f7ff fbc2 	bl	8000b54 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e0b5      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e2:	4b3e      	ldr	r3, [pc, #248]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1ee      	bne.n	80013cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d105      	bne.n	8001400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f4:	4b39      	ldr	r3, [pc, #228]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	4a38      	ldr	r2, [pc, #224]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80013fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80a1 	beq.w	800154c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800140a:	4b34      	ldr	r3, [pc, #208]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b08      	cmp	r3, #8
 8001414:	d05c      	beq.n	80014d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d141      	bne.n	80014a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141e:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <HAL_RCC_OscConfig+0x478>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fb96 	bl	8000b54 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff fb92 	bl	8000b54 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e087      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143e:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69da      	ldr	r2, [r3, #28]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001458:	019b      	lsls	r3, r3, #6
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001460:	085b      	lsrs	r3, r3, #1
 8001462:	3b01      	subs	r3, #1
 8001464:	041b      	lsls	r3, r3, #16
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146c:	061b      	lsls	r3, r3, #24
 800146e:	491b      	ldr	r1, [pc, #108]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <HAL_RCC_OscConfig+0x478>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fb6b 	bl	8000b54 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fb67 	bl	8000b54 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e05c      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x416>
 80014a0:	e054      	b.n	800154c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <HAL_RCC_OscConfig+0x478>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb54 	bl	8000b54 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff fb50 	bl	8000b54 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e045      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x444>
 80014ce:	e03d      	b.n	800154c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d107      	bne.n	80014e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e038      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000
 80014e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <HAL_RCC_OscConfig+0x4ec>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d028      	beq.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d121      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d11a      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001518:	4013      	ands	r3, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800151e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001520:	4293      	cmp	r3, r2
 8001522:	d111      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	3b01      	subs	r3, #1
 8001532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d107      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0cc      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001570:	4b68      	ldr	r3, [pc, #416]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d90c      	bls.n	8001598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b65      	ldr	r3, [pc, #404]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b63      	ldr	r3, [pc, #396]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0b8      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b0:	4b59      	ldr	r3, [pc, #356]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a58      	ldr	r2, [pc, #352]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c8:	4b53      	ldr	r3, [pc, #332]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a52      	ldr	r2, [pc, #328]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b50      	ldr	r3, [pc, #320]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	494d      	ldr	r1, [pc, #308]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d044      	beq.n	800167c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b47      	ldr	r3, [pc, #284]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d119      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e07f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d003      	beq.n	800161a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	2b03      	cmp	r3, #3
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	4b3f      	ldr	r3, [pc, #252]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	4b3b      	ldr	r3, [pc, #236]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e067      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163a:	4b37      	ldr	r3, [pc, #220]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f023 0203 	bic.w	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4934      	ldr	r1, [pc, #208]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164c:	f7ff fa82 	bl	8000b54 <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	e00a      	b.n	800166a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001654:	f7ff fa7e 	bl	8000b54 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e04f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 020c 	and.w	r2, r3, #12
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	429a      	cmp	r2, r3
 800167a:	d1eb      	bne.n	8001654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800167c:	4b25      	ldr	r3, [pc, #148]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d20c      	bcs.n	80016a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e032      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4916      	ldr	r1, [pc, #88]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	490e      	ldr	r1, [pc, #56]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016e2:	f000 f821 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 80016e6:	4602      	mov	r2, r0
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	490a      	ldr	r1, [pc, #40]	@ (800171c <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	5ccb      	ldrb	r3, [r1, r3]
 80016f6:	fa22 f303 	lsr.w	r3, r2, r3
 80016fa:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_RCC_ClockConfig+0x1c8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f912 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023c00 	.word	0x40023c00
 8001718:	40023800 	.word	0x40023800
 800171c:	080045c4 	.word	0x080045c4
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800172c:	b094      	sub	sp, #80	@ 0x50
 800172e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001740:	4b79      	ldr	r3, [pc, #484]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x200>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d00d      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x40>
 800174c:	2b08      	cmp	r3, #8
 800174e:	f200 80e1 	bhi.w	8001914 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x34>
 8001756:	2b04      	cmp	r3, #4
 8001758:	d003      	beq.n	8001762 <HAL_RCC_GetSysClockFreq+0x3a>
 800175a:	e0db      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4b73      	ldr	r3, [pc, #460]	@ (800192c <HAL_RCC_GetSysClockFreq+0x204>)
 800175e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001760:	e0db      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001762:	4b73      	ldr	r3, [pc, #460]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x208>)
 8001764:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001766:	e0d8      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001768:	4b6f      	ldr	r3, [pc, #444]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x200>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001770:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001772:	4b6d      	ldr	r3, [pc, #436]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x200>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d063      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177e:	4b6a      	ldr	r3, [pc, #424]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x200>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	099b      	lsrs	r3, r3, #6
 8001784:	2200      	movs	r2, #0
 8001786:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001788:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800178a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800178c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001790:	633b      	str	r3, [r7, #48]	@ 0x30
 8001792:	2300      	movs	r3, #0
 8001794:	637b      	str	r3, [r7, #52]	@ 0x34
 8001796:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800179a:	4622      	mov	r2, r4
 800179c:	462b      	mov	r3, r5
 800179e:	f04f 0000 	mov.w	r0, #0
 80017a2:	f04f 0100 	mov.w	r1, #0
 80017a6:	0159      	lsls	r1, r3, #5
 80017a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ac:	0150      	lsls	r0, r2, #5
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4621      	mov	r1, r4
 80017b4:	1a51      	subs	r1, r2, r1
 80017b6:	6139      	str	r1, [r7, #16]
 80017b8:	4629      	mov	r1, r5
 80017ba:	eb63 0301 	sbc.w	r3, r3, r1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017cc:	4659      	mov	r1, fp
 80017ce:	018b      	lsls	r3, r1, #6
 80017d0:	4651      	mov	r1, sl
 80017d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d6:	4651      	mov	r1, sl
 80017d8:	018a      	lsls	r2, r1, #6
 80017da:	4651      	mov	r1, sl
 80017dc:	ebb2 0801 	subs.w	r8, r2, r1
 80017e0:	4659      	mov	r1, fp
 80017e2:	eb63 0901 	sbc.w	r9, r3, r1
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017fa:	4690      	mov	r8, r2
 80017fc:	4699      	mov	r9, r3
 80017fe:	4623      	mov	r3, r4
 8001800:	eb18 0303 	adds.w	r3, r8, r3
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	462b      	mov	r3, r5
 8001808:	eb49 0303 	adc.w	r3, r9, r3
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800181a:	4629      	mov	r1, r5
 800181c:	024b      	lsls	r3, r1, #9
 800181e:	4621      	mov	r1, r4
 8001820:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001824:	4621      	mov	r1, r4
 8001826:	024a      	lsls	r2, r1, #9
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800182e:	2200      	movs	r2, #0
 8001830:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001832:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001838:	f7fe fcd2 	bl	80001e0 <__aeabi_uldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4613      	mov	r3, r2
 8001842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001844:	e058      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001846:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x200>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	099b      	lsrs	r3, r3, #6
 800184c:	2200      	movs	r2, #0
 800184e:	4618      	mov	r0, r3
 8001850:	4611      	mov	r1, r2
 8001852:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001856:	623b      	str	r3, [r7, #32]
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
 800185c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001860:	4642      	mov	r2, r8
 8001862:	464b      	mov	r3, r9
 8001864:	f04f 0000 	mov.w	r0, #0
 8001868:	f04f 0100 	mov.w	r1, #0
 800186c:	0159      	lsls	r1, r3, #5
 800186e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001872:	0150      	lsls	r0, r2, #5
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4641      	mov	r1, r8
 800187a:	ebb2 0a01 	subs.w	sl, r2, r1
 800187e:	4649      	mov	r1, r9
 8001880:	eb63 0b01 	sbc.w	fp, r3, r1
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001890:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001894:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001898:	ebb2 040a 	subs.w	r4, r2, sl
 800189c:	eb63 050b 	sbc.w	r5, r3, fp
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	00eb      	lsls	r3, r5, #3
 80018aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ae:	00e2      	lsls	r2, r4, #3
 80018b0:	4614      	mov	r4, r2
 80018b2:	461d      	mov	r5, r3
 80018b4:	4643      	mov	r3, r8
 80018b6:	18e3      	adds	r3, r4, r3
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	464b      	mov	r3, r9
 80018bc:	eb45 0303 	adc.w	r3, r5, r3
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ce:	4629      	mov	r1, r5
 80018d0:	028b      	lsls	r3, r1, #10
 80018d2:	4621      	mov	r1, r4
 80018d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018d8:	4621      	mov	r1, r4
 80018da:	028a      	lsls	r2, r1, #10
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018e2:	2200      	movs	r2, #0
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	61fa      	str	r2, [r7, #28]
 80018e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018ec:	f7fe fc78 	bl	80001e0 <__aeabi_uldivmod>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4613      	mov	r3, r2
 80018f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x200>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	3301      	adds	r3, #1
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001908:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800190a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800190c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001910:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001912:	e002      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <HAL_RCC_GetSysClockFreq+0x204>)
 8001916:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800191c:	4618      	mov	r0, r3
 800191e:	3750      	adds	r7, #80	@ 0x50
 8001920:	46bd      	mov	sp, r7
 8001922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	00f42400 	.word	0x00f42400
 8001930:	007a1200 	.word	0x007a1200

08001934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001938:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <HAL_RCC_GetHCLKFreq+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000

0800194c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001950:	f7ff fff0 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 8001954:	4602      	mov	r2, r0
 8001956:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	0a9b      	lsrs	r3, r3, #10
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4903      	ldr	r1, [pc, #12]	@ (8001970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	080045d4 	.word	0x080045d4

08001974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001978:	f7ff ffdc 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0b5b      	lsrs	r3, r3, #13
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	@ (8001998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	080045d4 	.word	0x080045d4

0800199c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	220f      	movs	r2, #15
 80019aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0203 	and.w	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	08db      	lsrs	r3, r3, #3
 80019d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019de:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <HAL_RCC_GetClockConfig+0x60>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0207 	and.w	r2, r3, #7
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	601a      	str	r2, [r3, #0]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e041      	b.n	8001a96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f839 	bl	8001a9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f000 f9b2 	bl	8001da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d001      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e044      	b.n	8001b56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b64 <HAL_TIM_Base_Start_IT+0xb0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d018      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001af6:	d013      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1a      	ldr	r2, [pc, #104]	@ (8001b68 <HAL_TIM_Base_Start_IT+0xb4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00e      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a19      	ldr	r2, [pc, #100]	@ (8001b6c <HAL_TIM_Base_Start_IT+0xb8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d009      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a17      	ldr	r2, [pc, #92]	@ (8001b70 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a16      	ldr	r2, [pc, #88]	@ (8001b74 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d111      	bne.n	8001b44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d010      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b42:	e007      	b.n	8001b54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40010000 	.word	0x40010000
 8001b68:	40000400 	.word	0x40000400
 8001b6c:	40000800 	.word	0x40000800
 8001b70:	40000c00 	.word	0x40000c00
 8001b74:	40014000 	.word	0x40014000

08001b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d020      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01b      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f06f 0202 	mvn.w	r2, #2
 8001bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8d2 	bl	8001d6c <HAL_TIM_IC_CaptureCallback>
 8001bc8:	e005      	b.n	8001bd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8c4 	bl	8001d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f8d5 	bl	8001d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d020      	beq.n	8001c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01b      	beq.n	8001c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0204 	mvn.w	r2, #4
 8001bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8ac 	bl	8001d6c <HAL_TIM_IC_CaptureCallback>
 8001c14:	e005      	b.n	8001c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f89e 	bl	8001d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f8af 	bl	8001d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d020      	beq.n	8001c74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d01b      	beq.n	8001c74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0208 	mvn.w	r2, #8
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f886 	bl	8001d6c <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f878 	bl	8001d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f889 	bl	8001d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d020      	beq.n	8001cc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01b      	beq.n	8001cc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0210 	mvn.w	r2, #16
 8001c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2208      	movs	r2, #8
 8001c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f860 	bl	8001d6c <HAL_TIM_IC_CaptureCallback>
 8001cac:	e005      	b.n	8001cba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f852 	bl	8001d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f863 	bl	8001d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00c      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0201 	mvn.w	r2, #1
 8001cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe fd98 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00c      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8e0 	bl	8001ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00c      	beq.n	8001d2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f834 	bl	8001d94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f003 0320 	and.w	r3, r3, #32
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00c      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0220 	mvn.w	r2, #32
 8001d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8b2 	bl	8001eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a37      	ldr	r2, [pc, #220]	@ (8001e98 <TIM_Base_SetConfig+0xf0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00f      	beq.n	8001de0 <TIM_Base_SetConfig+0x38>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc6:	d00b      	beq.n	8001de0 <TIM_Base_SetConfig+0x38>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a34      	ldr	r2, [pc, #208]	@ (8001e9c <TIM_Base_SetConfig+0xf4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d007      	beq.n	8001de0 <TIM_Base_SetConfig+0x38>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a33      	ldr	r2, [pc, #204]	@ (8001ea0 <TIM_Base_SetConfig+0xf8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d003      	beq.n	8001de0 <TIM_Base_SetConfig+0x38>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a32      	ldr	r2, [pc, #200]	@ (8001ea4 <TIM_Base_SetConfig+0xfc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d108      	bne.n	8001df2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a28      	ldr	r2, [pc, #160]	@ (8001e98 <TIM_Base_SetConfig+0xf0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01b      	beq.n	8001e32 <TIM_Base_SetConfig+0x8a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e00:	d017      	beq.n	8001e32 <TIM_Base_SetConfig+0x8a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a25      	ldr	r2, [pc, #148]	@ (8001e9c <TIM_Base_SetConfig+0xf4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <TIM_Base_SetConfig+0x8a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a24      	ldr	r2, [pc, #144]	@ (8001ea0 <TIM_Base_SetConfig+0xf8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00f      	beq.n	8001e32 <TIM_Base_SetConfig+0x8a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a23      	ldr	r2, [pc, #140]	@ (8001ea4 <TIM_Base_SetConfig+0xfc>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00b      	beq.n	8001e32 <TIM_Base_SetConfig+0x8a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a22      	ldr	r2, [pc, #136]	@ (8001ea8 <TIM_Base_SetConfig+0x100>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <TIM_Base_SetConfig+0x8a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a21      	ldr	r2, [pc, #132]	@ (8001eac <TIM_Base_SetConfig+0x104>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d003      	beq.n	8001e32 <TIM_Base_SetConfig+0x8a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a20      	ldr	r2, [pc, #128]	@ (8001eb0 <TIM_Base_SetConfig+0x108>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d108      	bne.n	8001e44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a0c      	ldr	r2, [pc, #48]	@ (8001e98 <TIM_Base_SetConfig+0xf0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d103      	bne.n	8001e72 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f043 0204 	orr.w	r2, r3, #4
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	601a      	str	r2, [r3, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	40000800 	.word	0x40000800
 8001ea4:	40000c00 	.word	0x40000c00
 8001ea8:	40014000 	.word	0x40014000
 8001eac:	40014400 	.word	0x40014400
 8001eb0:	40014800 	.word	0x40014800

08001eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e042      	b.n	8001f74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fcca 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	@ 0x24
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f82b 	bl	8001f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f80:	b0c0      	sub	sp, #256	@ 0x100
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f98:	68d9      	ldr	r1, [r3, #12]
 8001f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	ea40 0301 	orr.w	r3, r0, r1
 8001fa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001fd4:	f021 010c 	bic.w	r1, r1, #12
 8001fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff6:	6999      	ldr	r1, [r3, #24]
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	ea40 0301 	orr.w	r3, r0, r1
 8002002:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b8f      	ldr	r3, [pc, #572]	@ (8002248 <UART_SetConfig+0x2cc>)
 800200c:	429a      	cmp	r2, r3
 800200e:	d005      	beq.n	800201c <UART_SetConfig+0xa0>
 8002010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4b8d      	ldr	r3, [pc, #564]	@ (800224c <UART_SetConfig+0x2d0>)
 8002018:	429a      	cmp	r2, r3
 800201a:	d104      	bne.n	8002026 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800201c:	f7ff fcaa 	bl	8001974 <HAL_RCC_GetPCLK2Freq>
 8002020:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002024:	e003      	b.n	800202e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002026:	f7ff fc91 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 800202a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800202e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002038:	f040 810c 	bne.w	8002254 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800203c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002040:	2200      	movs	r2, #0
 8002042:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002046:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800204a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800204e:	4622      	mov	r2, r4
 8002050:	462b      	mov	r3, r5
 8002052:	1891      	adds	r1, r2, r2
 8002054:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002056:	415b      	adcs	r3, r3
 8002058:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800205a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800205e:	4621      	mov	r1, r4
 8002060:	eb12 0801 	adds.w	r8, r2, r1
 8002064:	4629      	mov	r1, r5
 8002066:	eb43 0901 	adc.w	r9, r3, r1
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800207a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800207e:	4690      	mov	r8, r2
 8002080:	4699      	mov	r9, r3
 8002082:	4623      	mov	r3, r4
 8002084:	eb18 0303 	adds.w	r3, r8, r3
 8002088:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800208c:	462b      	mov	r3, r5
 800208e:	eb49 0303 	adc.w	r3, r9, r3
 8002092:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020aa:	460b      	mov	r3, r1
 80020ac:	18db      	adds	r3, r3, r3
 80020ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80020b0:	4613      	mov	r3, r2
 80020b2:	eb42 0303 	adc.w	r3, r2, r3
 80020b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80020b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80020c0:	f7fe f88e 	bl	80001e0 <__aeabi_uldivmod>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4b61      	ldr	r3, [pc, #388]	@ (8002250 <UART_SetConfig+0x2d4>)
 80020ca:	fba3 2302 	umull	r2, r3, r3, r2
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	011c      	lsls	r4, r3, #4
 80020d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020d6:	2200      	movs	r2, #0
 80020d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80020e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80020e4:	4642      	mov	r2, r8
 80020e6:	464b      	mov	r3, r9
 80020e8:	1891      	adds	r1, r2, r2
 80020ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80020ec:	415b      	adcs	r3, r3
 80020ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020f4:	4641      	mov	r1, r8
 80020f6:	eb12 0a01 	adds.w	sl, r2, r1
 80020fa:	4649      	mov	r1, r9
 80020fc:	eb43 0b01 	adc.w	fp, r3, r1
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800210c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002114:	4692      	mov	sl, r2
 8002116:	469b      	mov	fp, r3
 8002118:	4643      	mov	r3, r8
 800211a:	eb1a 0303 	adds.w	r3, sl, r3
 800211e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002122:	464b      	mov	r3, r9
 8002124:	eb4b 0303 	adc.w	r3, fp, r3
 8002128:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800212c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002138:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800213c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002140:	460b      	mov	r3, r1
 8002142:	18db      	adds	r3, r3, r3
 8002144:	643b      	str	r3, [r7, #64]	@ 0x40
 8002146:	4613      	mov	r3, r2
 8002148:	eb42 0303 	adc.w	r3, r2, r3
 800214c:	647b      	str	r3, [r7, #68]	@ 0x44
 800214e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002152:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002156:	f7fe f843 	bl	80001e0 <__aeabi_uldivmod>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4611      	mov	r1, r2
 8002160:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <UART_SetConfig+0x2d4>)
 8002162:	fba3 2301 	umull	r2, r3, r3, r1
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2264      	movs	r2, #100	@ 0x64
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	1acb      	subs	r3, r1, r3
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002176:	4b36      	ldr	r3, [pc, #216]	@ (8002250 <UART_SetConfig+0x2d4>)
 8002178:	fba3 2302 	umull	r2, r3, r3, r2
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002184:	441c      	add	r4, r3
 8002186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800218a:	2200      	movs	r2, #0
 800218c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002190:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002194:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002198:	4642      	mov	r2, r8
 800219a:	464b      	mov	r3, r9
 800219c:	1891      	adds	r1, r2, r2
 800219e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021a0:	415b      	adcs	r3, r3
 80021a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021a8:	4641      	mov	r1, r8
 80021aa:	1851      	adds	r1, r2, r1
 80021ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80021ae:	4649      	mov	r1, r9
 80021b0:	414b      	adcs	r3, r1
 80021b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80021c0:	4659      	mov	r1, fp
 80021c2:	00cb      	lsls	r3, r1, #3
 80021c4:	4651      	mov	r1, sl
 80021c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ca:	4651      	mov	r1, sl
 80021cc:	00ca      	lsls	r2, r1, #3
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	4642      	mov	r2, r8
 80021d6:	189b      	adds	r3, r3, r2
 80021d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021dc:	464b      	mov	r3, r9
 80021de:	460a      	mov	r2, r1
 80021e0:	eb42 0303 	adc.w	r3, r2, r3
 80021e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80021f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80021f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80021fc:	460b      	mov	r3, r1
 80021fe:	18db      	adds	r3, r3, r3
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002202:	4613      	mov	r3, r2
 8002204:	eb42 0303 	adc.w	r3, r2, r3
 8002208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800220a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800220e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002212:	f7fd ffe5 	bl	80001e0 <__aeabi_uldivmod>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <UART_SetConfig+0x2d4>)
 800221c:	fba3 1302 	umull	r1, r3, r3, r2
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	2164      	movs	r1, #100	@ 0x64
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	3332      	adds	r3, #50	@ 0x32
 800222e:	4a08      	ldr	r2, [pc, #32]	@ (8002250 <UART_SetConfig+0x2d4>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	f003 0207 	and.w	r2, r3, #7
 800223a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4422      	add	r2, r4
 8002242:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002244:	e106      	b.n	8002454 <UART_SetConfig+0x4d8>
 8002246:	bf00      	nop
 8002248:	40011000 	.word	0x40011000
 800224c:	40011400 	.word	0x40011400
 8002250:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002258:	2200      	movs	r2, #0
 800225a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800225e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002262:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002266:	4642      	mov	r2, r8
 8002268:	464b      	mov	r3, r9
 800226a:	1891      	adds	r1, r2, r2
 800226c:	6239      	str	r1, [r7, #32]
 800226e:	415b      	adcs	r3, r3
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
 8002272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002276:	4641      	mov	r1, r8
 8002278:	1854      	adds	r4, r2, r1
 800227a:	4649      	mov	r1, r9
 800227c:	eb43 0501 	adc.w	r5, r3, r1
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	00eb      	lsls	r3, r5, #3
 800228a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800228e:	00e2      	lsls	r2, r4, #3
 8002290:	4614      	mov	r4, r2
 8002292:	461d      	mov	r5, r3
 8002294:	4643      	mov	r3, r8
 8002296:	18e3      	adds	r3, r4, r3
 8002298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800229c:	464b      	mov	r3, r9
 800229e:	eb45 0303 	adc.w	r3, r5, r3
 80022a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022c2:	4629      	mov	r1, r5
 80022c4:	008b      	lsls	r3, r1, #2
 80022c6:	4621      	mov	r1, r4
 80022c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022cc:	4621      	mov	r1, r4
 80022ce:	008a      	lsls	r2, r1, #2
 80022d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80022d4:	f7fd ff84 	bl	80001e0 <__aeabi_uldivmod>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4b60      	ldr	r3, [pc, #384]	@ (8002460 <UART_SetConfig+0x4e4>)
 80022de:	fba3 2302 	umull	r2, r3, r3, r2
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	011c      	lsls	r4, r3, #4
 80022e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022ea:	2200      	movs	r2, #0
 80022ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80022f8:	4642      	mov	r2, r8
 80022fa:	464b      	mov	r3, r9
 80022fc:	1891      	adds	r1, r2, r2
 80022fe:	61b9      	str	r1, [r7, #24]
 8002300:	415b      	adcs	r3, r3
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002308:	4641      	mov	r1, r8
 800230a:	1851      	adds	r1, r2, r1
 800230c:	6139      	str	r1, [r7, #16]
 800230e:	4649      	mov	r1, r9
 8002310:	414b      	adcs	r3, r1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002320:	4659      	mov	r1, fp
 8002322:	00cb      	lsls	r3, r1, #3
 8002324:	4651      	mov	r1, sl
 8002326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800232a:	4651      	mov	r1, sl
 800232c:	00ca      	lsls	r2, r1, #3
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	4603      	mov	r3, r0
 8002334:	4642      	mov	r2, r8
 8002336:	189b      	adds	r3, r3, r2
 8002338:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800233c:	464b      	mov	r3, r9
 800233e:	460a      	mov	r2, r1
 8002340:	eb42 0303 	adc.w	r3, r2, r3
 8002344:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002352:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002360:	4649      	mov	r1, r9
 8002362:	008b      	lsls	r3, r1, #2
 8002364:	4641      	mov	r1, r8
 8002366:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800236a:	4641      	mov	r1, r8
 800236c:	008a      	lsls	r2, r1, #2
 800236e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002372:	f7fd ff35 	bl	80001e0 <__aeabi_uldivmod>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4611      	mov	r1, r2
 800237c:	4b38      	ldr	r3, [pc, #224]	@ (8002460 <UART_SetConfig+0x4e4>)
 800237e:	fba3 2301 	umull	r2, r3, r3, r1
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2264      	movs	r2, #100	@ 0x64
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	1acb      	subs	r3, r1, r3
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	3332      	adds	r3, #50	@ 0x32
 8002390:	4a33      	ldr	r2, [pc, #204]	@ (8002460 <UART_SetConfig+0x4e4>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800239c:	441c      	add	r4, r3
 800239e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023a2:	2200      	movs	r2, #0
 80023a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80023a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80023a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023ac:	4642      	mov	r2, r8
 80023ae:	464b      	mov	r3, r9
 80023b0:	1891      	adds	r1, r2, r2
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	415b      	adcs	r3, r3
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023bc:	4641      	mov	r1, r8
 80023be:	1851      	adds	r1, r2, r1
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	4649      	mov	r1, r9
 80023c4:	414b      	adcs	r3, r1
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023d4:	4659      	mov	r1, fp
 80023d6:	00cb      	lsls	r3, r1, #3
 80023d8:	4651      	mov	r1, sl
 80023da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023de:	4651      	mov	r1, sl
 80023e0:	00ca      	lsls	r2, r1, #3
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	4642      	mov	r2, r8
 80023ea:	189b      	adds	r3, r3, r2
 80023ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023ee:	464b      	mov	r3, r9
 80023f0:	460a      	mov	r2, r1
 80023f2:	eb42 0303 	adc.w	r3, r2, r3
 80023f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80023f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	663b      	str	r3, [r7, #96]	@ 0x60
 8002402:	667a      	str	r2, [r7, #100]	@ 0x64
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002410:	4649      	mov	r1, r9
 8002412:	008b      	lsls	r3, r1, #2
 8002414:	4641      	mov	r1, r8
 8002416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800241a:	4641      	mov	r1, r8
 800241c:	008a      	lsls	r2, r1, #2
 800241e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002422:	f7fd fedd 	bl	80001e0 <__aeabi_uldivmod>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4b0d      	ldr	r3, [pc, #52]	@ (8002460 <UART_SetConfig+0x4e4>)
 800242c:	fba3 1302 	umull	r1, r3, r3, r2
 8002430:	095b      	lsrs	r3, r3, #5
 8002432:	2164      	movs	r1, #100	@ 0x64
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	3332      	adds	r3, #50	@ 0x32
 800243e:	4a08      	ldr	r2, [pc, #32]	@ (8002460 <UART_SetConfig+0x4e4>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	f003 020f 	and.w	r2, r3, #15
 800244a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4422      	add	r2, r4
 8002452:	609a      	str	r2, [r3, #8]
}
 8002454:	bf00      	nop
 8002456:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800245a:	46bd      	mov	sp, r7
 800245c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002460:	51eb851f 	.word	0x51eb851f

08002464 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002476:	2b84      	cmp	r3, #132	@ 0x84
 8002478:	d005      	beq.n	8002486 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800247a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4413      	add	r3, r2
 8002482:	3303      	adds	r3, #3
 8002484:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002498:	f000 fe30 	bl	80030fc <vTaskStartScheduler>
  
  return osOK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80024a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a4:	b089      	sub	sp, #36	@ 0x24
 80024a6:	af04      	add	r7, sp, #16
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d020      	beq.n	80024f6 <osThreadCreate+0x54>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01c      	beq.n	80024f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685c      	ldr	r4, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691e      	ldr	r6, [r3, #16]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ffc8 	bl	8002464 <makeFreeRtosPriority>
 80024d4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024de:	9202      	str	r2, [sp, #8]
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	9100      	str	r1, [sp, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4632      	mov	r2, r6
 80024e8:	4629      	mov	r1, r5
 80024ea:	4620      	mov	r0, r4
 80024ec:	f000 fc56 	bl	8002d9c <xTaskCreateStatic>
 80024f0:	4603      	mov	r3, r0
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	e01c      	b.n	8002530 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685c      	ldr	r4, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002502:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ffaa 	bl	8002464 <makeFreeRtosPriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	9200      	str	r2, [sp, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	4632      	mov	r2, r6
 800251e:	4629      	mov	r1, r5
 8002520:	4620      	mov	r0, r4
 8002522:	f000 fc9b 	bl	8002e5c <xTaskCreate>
 8002526:	4603      	mov	r3, r0
 8002528:	2b01      	cmp	r3, #1
 800252a:	d001      	beq.n	8002530 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800252c:	2300      	movs	r3, #0
 800252e:	e000      	b.n	8002532 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002530:	68fb      	ldr	r3, [r7, #12]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800253a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4619      	mov	r1, r3
 8002550:	2001      	movs	r0, #1
 8002552:	f000 fa32 	bl	80029ba <xQueueCreateMutexStatic>
 8002556:	4603      	mov	r3, r0
 8002558:	e003      	b.n	8002562 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800255a:	2001      	movs	r0, #1
 800255c:	f000 fa15 	bl	800298a <xQueueCreateMutex>
 8002560:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f103 0208 	add.w	r2, r3, #8
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002582:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f103 0208 	add.w	r2, r3, #8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f103 0208 	add.w	r2, r3, #8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	601a      	str	r2, [r3, #0]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002622:	d103      	bne.n	800262c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	e00c      	b.n	8002646 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3308      	adds	r3, #8
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	e002      	b.n	800263a <vListInsert+0x2e>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	429a      	cmp	r2, r3
 8002644:	d2f6      	bcs.n	8002634 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	601a      	str	r2, [r3, #0]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800267e:	b480      	push	{r7}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6892      	ldr	r2, [r2, #8]
 8002694:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6852      	ldr	r2, [r2, #4]
 800269e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d103      	bne.n	80026b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	1e5a      	subs	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10b      	bne.n	8002700 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026fa:	bf00      	nop
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002700:	f001 fb5a 	bl	8003db8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270c:	68f9      	ldr	r1, [r7, #12]
 800270e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	441a      	add	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002730:	3b01      	subs	r3, #1
 8002732:	68f9      	ldr	r1, [r7, #12]
 8002734:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	441a      	add	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	22ff      	movs	r2, #255	@ 0xff
 8002744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	22ff      	movs	r2, #255	@ 0xff
 800274c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d114      	bne.n	8002780 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d01a      	beq.n	8002794 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3310      	adds	r3, #16
 8002762:	4618      	mov	r0, r3
 8002764:	f000 ff24 	bl	80035b0 <xTaskRemoveFromEventList>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d012      	beq.n	8002794 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800276e:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <xQueueGenericReset+0xd0>)
 8002770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	f3bf 8f6f 	isb	sy
 800277e:	e009      	b.n	8002794 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3310      	adds	r3, #16
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fef0 	bl	800256a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3324      	adds	r3, #36	@ 0x24
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff feeb 	bl	800256a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002794:	f001 fb42 	bl	8003e1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002798:	2301      	movs	r3, #1
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	e000ed04 	.word	0xe000ed04

080027a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08e      	sub	sp, #56	@ 0x38
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10b      	bne.n	80027d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80027ce:	bf00      	nop
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10b      	bne.n	80027f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80027da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027de:	f383 8811 	msr	BASEPRI, r3
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	e7fd      	b.n	80027ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <xQueueGenericCreateStatic+0x56>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <xQueueGenericCreateStatic+0x5a>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <xQueueGenericCreateStatic+0x5c>
 8002802:	2300      	movs	r3, #0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10b      	bne.n	8002820 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	623b      	str	r3, [r7, #32]
}
 800281a:	bf00      	nop
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d102      	bne.n	800282c <xQueueGenericCreateStatic+0x84>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <xQueueGenericCreateStatic+0x88>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <xQueueGenericCreateStatic+0x8a>
 8002830:	2300      	movs	r3, #0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10b      	bne.n	800284e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	61fb      	str	r3, [r7, #28]
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	e7fd      	b.n	800284a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800284e:	2348      	movs	r3, #72	@ 0x48
 8002850:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b48      	cmp	r3, #72	@ 0x48
 8002856:	d00b      	beq.n	8002870 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	61bb      	str	r3, [r7, #24]
}
 800286a:	bf00      	nop
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002870:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00d      	beq.n	8002898 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800287c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002884:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f840 	bl	8002918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800289a:	4618      	mov	r0, r3
 800289c:	3730      	adds	r7, #48	@ 0x30
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b08a      	sub	sp, #40	@ 0x28
 80028a6:	af02      	add	r7, sp, #8
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	4613      	mov	r3, r2
 80028ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10b      	bne.n	80028ce <xQueueGenericCreate+0x2c>
	__asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	613b      	str	r3, [r7, #16]
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	e7fd      	b.n	80028ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	fb02 f303 	mul.w	r3, r2, r3
 80028d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	3348      	adds	r3, #72	@ 0x48
 80028dc:	4618      	mov	r0, r3
 80028de:	f001 fb4b 	bl	8003f78 <pvPortMalloc>
 80028e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d011      	beq.n	800290e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3348      	adds	r3, #72	@ 0x48
 80028f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028fc:	79fa      	ldrb	r2, [r7, #7]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	4613      	mov	r3, r2
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f805 	bl	8002918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800290e:	69bb      	ldr	r3, [r7, #24]
	}
 8002910:	4618      	mov	r0, r3
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d103      	bne.n	8002934 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	e002      	b.n	800293a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002946:	2101      	movs	r1, #1
 8002948:	69b8      	ldr	r0, [r7, #24]
 800294a:	f7ff fec3 	bl	80026d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002976:	2300      	movs	r3, #0
 8002978:	2200      	movs	r2, #0
 800297a:	2100      	movs	r1, #0
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f837 	bl	80029f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002994:	2301      	movs	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	461a      	mov	r2, r3
 80029a0:	6939      	ldr	r1, [r7, #16]
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7ff ff7d 	bl	80028a2 <xQueueGenericCreate>
 80029a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7ff ffd3 	bl	8002956 <prvInitialiseMutex>

		return xNewQueue;
 80029b0:	68fb      	ldr	r3, [r7, #12]
	}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b088      	sub	sp, #32
 80029be:	af02      	add	r7, sp, #8
 80029c0:	4603      	mov	r3, r0
 80029c2:	6039      	str	r1, [r7, #0]
 80029c4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80029c6:	2301      	movs	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2200      	movs	r2, #0
 80029d6:	6939      	ldr	r1, [r7, #16]
 80029d8:	6978      	ldr	r0, [r7, #20]
 80029da:	f7ff fee5 	bl	80027a8 <xQueueGenericCreateStatic>
 80029de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7ff ffb8 	bl	8002956 <prvInitialiseMutex>

		return xNewQueue;
 80029e6:	68fb      	ldr	r3, [r7, #12]
	}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	@ 0x38
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029fe:	2300      	movs	r3, #0
 8002a00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10b      	bne.n	8002a24 <xQueueGenericSend+0x34>
	__asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <xQueueGenericSend+0x42>
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <xQueueGenericSend+0x46>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <xQueueGenericSend+0x48>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10b      	bne.n	8002a54 <xQueueGenericSend+0x64>
	__asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a4e:	bf00      	nop
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d103      	bne.n	8002a62 <xQueueGenericSend+0x72>
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <xQueueGenericSend+0x76>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <xQueueGenericSend+0x78>
 8002a66:	2300      	movs	r3, #0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <xQueueGenericSend+0x94>
	__asm volatile
 8002a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	623b      	str	r3, [r7, #32]
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a84:	f000 ff5a 	bl	800393c <xTaskGetSchedulerState>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <xQueueGenericSend+0xa4>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <xQueueGenericSend+0xa8>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <xQueueGenericSend+0xaa>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10b      	bne.n	8002ab6 <xQueueGenericSend+0xc6>
	__asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	61fb      	str	r3, [r7, #28]
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	e7fd      	b.n	8002ab2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ab6:	f001 f97f 	bl	8003db8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d302      	bcc.n	8002acc <xQueueGenericSend+0xdc>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d129      	bne.n	8002b20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ad2:	f000 f88f 	bl	8002bf4 <prvCopyDataToQueue>
 8002ad6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d010      	beq.n	8002b02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae2:	3324      	adds	r3, #36	@ 0x24
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fd63 	bl	80035b0 <xTaskRemoveFromEventList>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002af0:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf0 <xQueueGenericSend+0x200>)
 8002af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	e00a      	b.n	8002b18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b08:	4b39      	ldr	r3, [pc, #228]	@ (8002bf0 <xQueueGenericSend+0x200>)
 8002b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b18:	f001 f980 	bl	8003e1c <vPortExitCritical>
				return pdPASS;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e063      	b.n	8002be8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b26:	f001 f979 	bl	8003e1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e05c      	b.n	8002be8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d106      	bne.n	8002b42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fd9d 	bl	8003678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b42:	f001 f96b 	bl	8003e1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b46:	f000 fb43 	bl	80031d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b4a:	f001 f935 	bl	8003db8 <vPortEnterCritical>
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b5a:	d103      	bne.n	8002b64 <xQueueGenericSend+0x174>
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b70:	d103      	bne.n	8002b7a <xQueueGenericSend+0x18a>
 8002b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b7a:	f001 f94f 	bl	8003e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b7e:	1d3a      	adds	r2, r7, #4
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fd8c 	bl	80036a4 <xTaskCheckForTimeOut>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d124      	bne.n	8002bdc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b94:	f000 f8ea 	bl	8002d6c <prvIsQueueFull>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d018      	beq.n	8002bd0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	3310      	adds	r3, #16
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fcdc 	bl	8003564 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bae:	f000 f88b 	bl	8002cc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bb2:	f000 fb1b 	bl	80031ec <xTaskResumeAll>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f47f af7c 	bne.w	8002ab6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <xQueueGenericSend+0x200>)
 8002bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	e772      	b.n	8002ab6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bd2:	f000 f879 	bl	8002cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bd6:	f000 fb09 	bl	80031ec <xTaskResumeAll>
 8002bda:	e76c      	b.n	8002ab6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bde:	f000 f873 	bl	8002cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002be2:	f000 fb03 	bl	80031ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002be6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3738      	adds	r7, #56	@ 0x38
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	e000ed04 	.word	0xe000ed04

08002bf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10d      	bne.n	8002c2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d14d      	bne.n	8002cb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 feaa 	bl	8003978 <xTaskPriorityDisinherit>
 8002c24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	e043      	b.n	8002cb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d119      	bne.n	8002c68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6858      	ldr	r0, [r3, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	f001 fc14 	bl	800446c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4c:	441a      	add	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d32b      	bcc.n	8002cb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	e026      	b.n	8002cb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	68d8      	ldr	r0, [r3, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	461a      	mov	r2, r3
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	f001 fbfa 	bl	800446c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	425b      	negs	r3, r3
 8002c82:	441a      	add	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d207      	bcs.n	8002ca4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	425b      	negs	r3, r3
 8002c9e:	441a      	add	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d105      	bne.n	8002cb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002cbe:	697b      	ldr	r3, [r7, #20]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002cd0:	f001 f872 	bl	8003db8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cdc:	e011      	b.n	8002d02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3324      	adds	r3, #36	@ 0x24
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fc60 	bl	80035b0 <xTaskRemoveFromEventList>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002cf6:	f000 fd39 	bl	800376c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	dce9      	bgt.n	8002cde <prvUnlockQueue+0x16>
 8002d0a:	e000      	b.n	8002d0e <prvUnlockQueue+0x46>
					break;
 8002d0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	22ff      	movs	r2, #255	@ 0xff
 8002d12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002d16:	f001 f881 	bl	8003e1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d1a:	f001 f84d 	bl	8003db8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d26:	e011      	b.n	8002d4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d012      	beq.n	8002d56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3310      	adds	r3, #16
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fc3b 	bl	80035b0 <xTaskRemoveFromEventList>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d40:	f000 fd14 	bl	800376c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d44:	7bbb      	ldrb	r3, [r7, #14]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	dce9      	bgt.n	8002d28 <prvUnlockQueue+0x60>
 8002d54:	e000      	b.n	8002d58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002d56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	22ff      	movs	r2, #255	@ 0xff
 8002d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002d60:	f001 f85c 	bl	8003e1c <vPortExitCritical>
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d74:	f001 f820 	bl	8003db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d102      	bne.n	8002d8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e001      	b.n	8002d8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d8e:	f001 f845 	bl	8003e1c <vPortExitCritical>

	return xReturn;
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08e      	sub	sp, #56	@ 0x38
 8002da0:	af04      	add	r7, sp, #16
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10b      	bne.n	8002dc8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	623b      	str	r3, [r7, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10b      	bne.n	8002de6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	61fb      	str	r3, [r7, #28]
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	e7fd      	b.n	8002de2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002de6:	23a0      	movs	r3, #160	@ 0xa0
 8002de8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2ba0      	cmp	r3, #160	@ 0xa0
 8002dee:	d00b      	beq.n	8002e08 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df4:	f383 8811 	msr	BASEPRI, r3
 8002df8:	f3bf 8f6f 	isb	sy
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	61bb      	str	r3, [r7, #24]
}
 8002e02:	bf00      	nop
 8002e04:	bf00      	nop
 8002e06:	e7fd      	b.n	8002e04 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01e      	beq.n	8002e4e <xTaskCreateStatic+0xb2>
 8002e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01b      	beq.n	8002e4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e1e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e28:	2300      	movs	r3, #0
 8002e2a:	9303      	str	r3, [sp, #12]
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	9302      	str	r3, [sp, #8]
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f851 	bl	8002ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e48:	f000 f8ee 	bl	8003028 <prvAddNewTaskToReadyList>
 8002e4c:	e001      	b.n	8002e52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e52:	697b      	ldr	r3, [r7, #20]
	}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3728      	adds	r7, #40	@ 0x28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08c      	sub	sp, #48	@ 0x30
 8002e60:	af04      	add	r7, sp, #16
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 f881 	bl	8003f78 <pvPortMalloc>
 8002e76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00e      	beq.n	8002e9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e7e:	20a0      	movs	r0, #160	@ 0xa0
 8002e80:	f001 f87a 	bl	8003f78 <pvPortMalloc>
 8002e84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e92:	e005      	b.n	8002ea0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e94:	6978      	ldr	r0, [r7, #20]
 8002e96:	f001 f93d 	bl	8004114 <vPortFree>
 8002e9a:	e001      	b.n	8002ea0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d017      	beq.n	8002ed6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002eae:	88fa      	ldrh	r2, [r7, #6]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9303      	str	r3, [sp, #12]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	9302      	str	r3, [sp, #8]
 8002eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eba:	9301      	str	r3, [sp, #4]
 8002ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f80f 	bl	8002ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002eca:	69f8      	ldr	r0, [r7, #28]
 8002ecc:	f000 f8ac 	bl	8003028 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	e002      	b.n	8002edc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002eda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002edc:	69bb      	ldr	r3, [r7, #24]
	}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f00:	3b01      	subs	r3, #1
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	617b      	str	r3, [r7, #20]
}
 8002f2c:	bf00      	nop
 8002f2e:	bf00      	nop
 8002f30:	e7fd      	b.n	8002f2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01f      	beq.n	8002f78 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	e012      	b.n	8002f64 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	7819      	ldrb	r1, [r3, #0]
 8002f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3334      	adds	r3, #52	@ 0x34
 8002f4e:	460a      	mov	r2, r1
 8002f50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	4413      	add	r3, r2
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3301      	adds	r3, #1
 8002f62:	61fb      	str	r3, [r7, #28]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	d9e9      	bls.n	8002f3e <prvInitialiseNewTask+0x56>
 8002f6a:	e000      	b.n	8002f6e <prvInitialiseNewTask+0x86>
			{
				break;
 8002f6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f76:	e003      	b.n	8002f80 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d901      	bls.n	8002f8a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f86:	2306      	movs	r3, #6
 8002f88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f94:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	2200      	movs	r2, #0
 8002f9a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fb02 	bl	80025aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa8:	3318      	adds	r3, #24
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fafd 	bl	80025aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb8:	f1c3 0207 	rsb	r2, r3, #7
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fc4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd8:	334c      	adds	r3, #76	@ 0x4c
 8002fda:	224c      	movs	r2, #76	@ 0x4c
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 f9b8 	bl	8004354 <memset>
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	4a0d      	ldr	r2, [pc, #52]	@ (800301c <prvInitialiseNewTask+0x134>)
 8002fe8:	651a      	str	r2, [r3, #80]	@ 0x50
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	4a0c      	ldr	r2, [pc, #48]	@ (8003020 <prvInitialiseNewTask+0x138>)
 8002fee:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8003024 <prvInitialiseNewTask+0x13c>)
 8002ff4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	69b8      	ldr	r0, [r7, #24]
 8002ffc:	f000 fdaa 	bl	8003b54 <pxPortInitialiseStack>
 8003000:	4602      	mov	r2, r0
 8003002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003004:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800300c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003010:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003012:	bf00      	nop
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20004120 	.word	0x20004120
 8003020:	20004188 	.word	0x20004188
 8003024:	200041f0 	.word	0x200041f0

08003028 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003030:	f000 fec2 	bl	8003db8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003034:	4b2a      	ldr	r3, [pc, #168]	@ (80030e0 <prvAddNewTaskToReadyList+0xb8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	4a29      	ldr	r2, [pc, #164]	@ (80030e0 <prvAddNewTaskToReadyList+0xb8>)
 800303c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800303e:	4b29      	ldr	r3, [pc, #164]	@ (80030e4 <prvAddNewTaskToReadyList+0xbc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003046:	4a27      	ldr	r2, [pc, #156]	@ (80030e4 <prvAddNewTaskToReadyList+0xbc>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800304c:	4b24      	ldr	r3, [pc, #144]	@ (80030e0 <prvAddNewTaskToReadyList+0xb8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d110      	bne.n	8003076 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003054:	f000 fbae 	bl	80037b4 <prvInitialiseTaskLists>
 8003058:	e00d      	b.n	8003076 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800305a:	4b23      	ldr	r3, [pc, #140]	@ (80030e8 <prvAddNewTaskToReadyList+0xc0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003062:	4b20      	ldr	r3, [pc, #128]	@ (80030e4 <prvAddNewTaskToReadyList+0xbc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306c:	429a      	cmp	r2, r3
 800306e:	d802      	bhi.n	8003076 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003070:	4a1c      	ldr	r2, [pc, #112]	@ (80030e4 <prvAddNewTaskToReadyList+0xbc>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003076:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <prvAddNewTaskToReadyList+0xc4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3301      	adds	r3, #1
 800307c:	4a1b      	ldr	r2, [pc, #108]	@ (80030ec <prvAddNewTaskToReadyList+0xc4>)
 800307e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003084:	2201      	movs	r2, #1
 8003086:	409a      	lsls	r2, r3
 8003088:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <prvAddNewTaskToReadyList+0xc8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4313      	orrs	r3, r2
 800308e:	4a18      	ldr	r2, [pc, #96]	@ (80030f0 <prvAddNewTaskToReadyList+0xc8>)
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4a15      	ldr	r2, [pc, #84]	@ (80030f4 <prvAddNewTaskToReadyList+0xcc>)
 80030a0:	441a      	add	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	4619      	mov	r1, r3
 80030a8:	4610      	mov	r0, r2
 80030aa:	f7ff fa8b 	bl	80025c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030ae:	f000 feb5 	bl	8003e1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030b2:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <prvAddNewTaskToReadyList+0xc0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00e      	beq.n	80030d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030ba:	4b0a      	ldr	r3, [pc, #40]	@ (80030e4 <prvAddNewTaskToReadyList+0xbc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d207      	bcs.n	80030d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80030c8:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <prvAddNewTaskToReadyList+0xd0>)
 80030ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	200004cc 	.word	0x200004cc
 80030e4:	200003cc 	.word	0x200003cc
 80030e8:	200004d8 	.word	0x200004d8
 80030ec:	200004e8 	.word	0x200004e8
 80030f0:	200004d4 	.word	0x200004d4
 80030f4:	200003d0 	.word	0x200003d0
 80030f8:	e000ed04 	.word	0xe000ed04

080030fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	@ 0x28
 8003100:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800310a:	463a      	mov	r2, r7
 800310c:	1d39      	adds	r1, r7, #4
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd f9fa 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003118:	6839      	ldr	r1, [r7, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	9202      	str	r2, [sp, #8]
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	2300      	movs	r3, #0
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	2300      	movs	r3, #0
 8003128:	460a      	mov	r2, r1
 800312a:	4921      	ldr	r1, [pc, #132]	@ (80031b0 <vTaskStartScheduler+0xb4>)
 800312c:	4821      	ldr	r0, [pc, #132]	@ (80031b4 <vTaskStartScheduler+0xb8>)
 800312e:	f7ff fe35 	bl	8002d9c <xTaskCreateStatic>
 8003132:	4603      	mov	r3, r0
 8003134:	4a20      	ldr	r2, [pc, #128]	@ (80031b8 <vTaskStartScheduler+0xbc>)
 8003136:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003138:	4b1f      	ldr	r3, [pc, #124]	@ (80031b8 <vTaskStartScheduler+0xbc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003140:	2301      	movs	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e001      	b.n	800314a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d11b      	bne.n	8003188 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	613b      	str	r3, [r7, #16]
}
 8003162:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003164:	4b15      	ldr	r3, [pc, #84]	@ (80031bc <vTaskStartScheduler+0xc0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	334c      	adds	r3, #76	@ 0x4c
 800316a:	4a15      	ldr	r2, [pc, #84]	@ (80031c0 <vTaskStartScheduler+0xc4>)
 800316c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800316e:	4b15      	ldr	r3, [pc, #84]	@ (80031c4 <vTaskStartScheduler+0xc8>)
 8003170:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003174:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003176:	4b14      	ldr	r3, [pc, #80]	@ (80031c8 <vTaskStartScheduler+0xcc>)
 8003178:	2201      	movs	r2, #1
 800317a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800317c:	4b13      	ldr	r3, [pc, #76]	@ (80031cc <vTaskStartScheduler+0xd0>)
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003182:	f000 fd75 	bl	8003c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003186:	e00f      	b.n	80031a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800318e:	d10b      	bne.n	80031a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	60fb      	str	r3, [r7, #12]
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <vTaskStartScheduler+0xa8>
}
 80031a8:	bf00      	nop
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	080045bc 	.word	0x080045bc
 80031b4:	08003785 	.word	0x08003785
 80031b8:	200004f0 	.word	0x200004f0
 80031bc:	200003cc 	.word	0x200003cc
 80031c0:	20000010 	.word	0x20000010
 80031c4:	200004ec 	.word	0x200004ec
 80031c8:	200004d8 	.word	0x200004d8
 80031cc:	200004d0 	.word	0x200004d0

080031d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80031d4:	4b04      	ldr	r3, [pc, #16]	@ (80031e8 <vTaskSuspendAll+0x18>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	4a03      	ldr	r2, [pc, #12]	@ (80031e8 <vTaskSuspendAll+0x18>)
 80031dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	200004f4 	.word	0x200004f4

080031ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031fa:	4b42      	ldr	r3, [pc, #264]	@ (8003304 <xTaskResumeAll+0x118>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10b      	bne.n	800321a <xTaskResumeAll+0x2e>
	__asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	603b      	str	r3, [r7, #0]
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	e7fd      	b.n	8003216 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800321a:	f000 fdcd 	bl	8003db8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800321e:	4b39      	ldr	r3, [pc, #228]	@ (8003304 <xTaskResumeAll+0x118>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3b01      	subs	r3, #1
 8003224:	4a37      	ldr	r2, [pc, #220]	@ (8003304 <xTaskResumeAll+0x118>)
 8003226:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003228:	4b36      	ldr	r3, [pc, #216]	@ (8003304 <xTaskResumeAll+0x118>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d161      	bne.n	80032f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003230:	4b35      	ldr	r3, [pc, #212]	@ (8003308 <xTaskResumeAll+0x11c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d05d      	beq.n	80032f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003238:	e02e      	b.n	8003298 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800323a:	4b34      	ldr	r3, [pc, #208]	@ (800330c <xTaskResumeAll+0x120>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3318      	adds	r3, #24
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fa19 	bl	800267e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3304      	adds	r3, #4
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fa14 	bl	800267e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325a:	2201      	movs	r2, #1
 800325c:	409a      	lsls	r2, r3
 800325e:	4b2c      	ldr	r3, [pc, #176]	@ (8003310 <xTaskResumeAll+0x124>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4313      	orrs	r3, r2
 8003264:	4a2a      	ldr	r2, [pc, #168]	@ (8003310 <xTaskResumeAll+0x124>)
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4a27      	ldr	r2, [pc, #156]	@ (8003314 <xTaskResumeAll+0x128>)
 8003276:	441a      	add	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3304      	adds	r3, #4
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f7ff f9a0 	bl	80025c4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003288:	4b23      	ldr	r3, [pc, #140]	@ (8003318 <xTaskResumeAll+0x12c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328e:	429a      	cmp	r2, r3
 8003290:	d302      	bcc.n	8003298 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003292:	4b22      	ldr	r3, [pc, #136]	@ (800331c <xTaskResumeAll+0x130>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003298:	4b1c      	ldr	r3, [pc, #112]	@ (800330c <xTaskResumeAll+0x120>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1cc      	bne.n	800323a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032a6:	f000 fb29 	bl	80038fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003320 <xTaskResumeAll+0x134>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032b6:	f000 f837 	bl	8003328 <xTaskIncrementTick>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80032c0:	4b16      	ldr	r3, [pc, #88]	@ (800331c <xTaskResumeAll+0x130>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f1      	bne.n	80032b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80032d2:	4b13      	ldr	r3, [pc, #76]	@ (8003320 <xTaskResumeAll+0x134>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032d8:	4b10      	ldr	r3, [pc, #64]	@ (800331c <xTaskResumeAll+0x130>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d009      	beq.n	80032f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032e0:	2301      	movs	r3, #1
 80032e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003324 <xTaskResumeAll+0x138>)
 80032e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032f4:	f000 fd92 	bl	8003e1c <vPortExitCritical>

	return xAlreadyYielded;
 80032f8:	68bb      	ldr	r3, [r7, #8]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200004f4 	.word	0x200004f4
 8003308:	200004cc 	.word	0x200004cc
 800330c:	2000048c 	.word	0x2000048c
 8003310:	200004d4 	.word	0x200004d4
 8003314:	200003d0 	.word	0x200003d0
 8003318:	200003cc 	.word	0x200003cc
 800331c:	200004e0 	.word	0x200004e0
 8003320:	200004dc 	.word	0x200004dc
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003332:	4b4f      	ldr	r3, [pc, #316]	@ (8003470 <xTaskIncrementTick+0x148>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 808f 	bne.w	800345a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800333c:	4b4d      	ldr	r3, [pc, #308]	@ (8003474 <xTaskIncrementTick+0x14c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003344:	4a4b      	ldr	r2, [pc, #300]	@ (8003474 <xTaskIncrementTick+0x14c>)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d121      	bne.n	8003394 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003350:	4b49      	ldr	r3, [pc, #292]	@ (8003478 <xTaskIncrementTick+0x150>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00b      	beq.n	8003372 <xTaskIncrementTick+0x4a>
	__asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	603b      	str	r3, [r7, #0]
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	e7fd      	b.n	800336e <xTaskIncrementTick+0x46>
 8003372:	4b41      	ldr	r3, [pc, #260]	@ (8003478 <xTaskIncrementTick+0x150>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	4b40      	ldr	r3, [pc, #256]	@ (800347c <xTaskIncrementTick+0x154>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a3e      	ldr	r2, [pc, #248]	@ (8003478 <xTaskIncrementTick+0x150>)
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4a3e      	ldr	r2, [pc, #248]	@ (800347c <xTaskIncrementTick+0x154>)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b3e      	ldr	r3, [pc, #248]	@ (8003480 <xTaskIncrementTick+0x158>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	4a3c      	ldr	r2, [pc, #240]	@ (8003480 <xTaskIncrementTick+0x158>)
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	f000 fab4 	bl	80038fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003394:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <xTaskIncrementTick+0x15c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	429a      	cmp	r2, r3
 800339c:	d348      	bcc.n	8003430 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800339e:	4b36      	ldr	r3, [pc, #216]	@ (8003478 <xTaskIncrementTick+0x150>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033a8:	4b36      	ldr	r3, [pc, #216]	@ (8003484 <xTaskIncrementTick+0x15c>)
 80033aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033ae:	601a      	str	r2, [r3, #0]
					break;
 80033b0:	e03e      	b.n	8003430 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b2:	4b31      	ldr	r3, [pc, #196]	@ (8003478 <xTaskIncrementTick+0x150>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d203      	bcs.n	80033d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003484 <xTaskIncrementTick+0x15c>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033d0:	e02e      	b.n	8003430 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3304      	adds	r3, #4
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff f951 	bl	800267e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d004      	beq.n	80033ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	3318      	adds	r3, #24
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff f948 	bl	800267e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f2:	2201      	movs	r2, #1
 80033f4:	409a      	lsls	r2, r3
 80033f6:	4b24      	ldr	r3, [pc, #144]	@ (8003488 <xTaskIncrementTick+0x160>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	4a22      	ldr	r2, [pc, #136]	@ (8003488 <xTaskIncrementTick+0x160>)
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4a1f      	ldr	r2, [pc, #124]	@ (800348c <xTaskIncrementTick+0x164>)
 800340e:	441a      	add	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	3304      	adds	r3, #4
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f7ff f8d4 	bl	80025c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003420:	4b1b      	ldr	r3, [pc, #108]	@ (8003490 <xTaskIncrementTick+0x168>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	429a      	cmp	r2, r3
 8003428:	d3b9      	bcc.n	800339e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800342a:	2301      	movs	r3, #1
 800342c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800342e:	e7b6      	b.n	800339e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003430:	4b17      	ldr	r3, [pc, #92]	@ (8003490 <xTaskIncrementTick+0x168>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003436:	4915      	ldr	r1, [pc, #84]	@ (800348c <xTaskIncrementTick+0x164>)
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d901      	bls.n	800344c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003448:	2301      	movs	r3, #1
 800344a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800344c:	4b11      	ldr	r3, [pc, #68]	@ (8003494 <xTaskIncrementTick+0x16c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003454:	2301      	movs	r3, #1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e004      	b.n	8003464 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800345a:	4b0f      	ldr	r3, [pc, #60]	@ (8003498 <xTaskIncrementTick+0x170>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3301      	adds	r3, #1
 8003460:	4a0d      	ldr	r2, [pc, #52]	@ (8003498 <xTaskIncrementTick+0x170>)
 8003462:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003464:	697b      	ldr	r3, [r7, #20]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200004f4 	.word	0x200004f4
 8003474:	200004d0 	.word	0x200004d0
 8003478:	20000484 	.word	0x20000484
 800347c:	20000488 	.word	0x20000488
 8003480:	200004e4 	.word	0x200004e4
 8003484:	200004ec 	.word	0x200004ec
 8003488:	200004d4 	.word	0x200004d4
 800348c:	200003d0 	.word	0x200003d0
 8003490:	200003cc 	.word	0x200003cc
 8003494:	200004e0 	.word	0x200004e0
 8003498:	200004dc 	.word	0x200004dc

0800349c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034a2:	4b2a      	ldr	r3, [pc, #168]	@ (800354c <vTaskSwitchContext+0xb0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034aa:	4b29      	ldr	r3, [pc, #164]	@ (8003550 <vTaskSwitchContext+0xb4>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034b0:	e045      	b.n	800353e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80034b2:	4b27      	ldr	r3, [pc, #156]	@ (8003550 <vTaskSwitchContext+0xb4>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034b8:	4b26      	ldr	r3, [pc, #152]	@ (8003554 <vTaskSwitchContext+0xb8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80034c6:	7afb      	ldrb	r3, [r7, #11]
 80034c8:	f1c3 031f 	rsb	r3, r3, #31
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	4922      	ldr	r1, [pc, #136]	@ (8003558 <vTaskSwitchContext+0xbc>)
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10b      	bne.n	80034fa <vTaskSwitchContext+0x5e>
	__asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	607b      	str	r3, [r7, #4]
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	e7fd      	b.n	80034f6 <vTaskSwitchContext+0x5a>
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4a14      	ldr	r2, [pc, #80]	@ (8003558 <vTaskSwitchContext+0xbc>)
 8003506:	4413      	add	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	3308      	adds	r3, #8
 800351c:	429a      	cmp	r2, r3
 800351e:	d104      	bne.n	800352a <vTaskSwitchContext+0x8e>
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <vTaskSwitchContext+0xc0>)
 8003532:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003534:	4b09      	ldr	r3, [pc, #36]	@ (800355c <vTaskSwitchContext+0xc0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	334c      	adds	r3, #76	@ 0x4c
 800353a:	4a09      	ldr	r2, [pc, #36]	@ (8003560 <vTaskSwitchContext+0xc4>)
 800353c:	6013      	str	r3, [r2, #0]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	200004f4 	.word	0x200004f4
 8003550:	200004e0 	.word	0x200004e0
 8003554:	200004d4 	.word	0x200004d4
 8003558:	200003d0 	.word	0x200003d0
 800355c:	200003cc 	.word	0x200003cc
 8003560:	20000010 	.word	0x20000010

08003564 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	60fb      	str	r3, [r7, #12]
}
 8003586:	bf00      	nop
 8003588:	bf00      	nop
 800358a:	e7fd      	b.n	8003588 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800358c:	4b07      	ldr	r3, [pc, #28]	@ (80035ac <vTaskPlaceOnEventList+0x48>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3318      	adds	r3, #24
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff f839 	bl	800260c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800359a:	2101      	movs	r1, #1
 800359c:	6838      	ldr	r0, [r7, #0]
 800359e:	f000 fa73 	bl	8003a88 <prvAddCurrentTaskToDelayedList>
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200003cc 	.word	0x200003cc

080035b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	60fb      	str	r3, [r7, #12]
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	e7fd      	b.n	80035da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	3318      	adds	r3, #24
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f84b 	bl	800267e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003660 <xTaskRemoveFromEventList+0xb0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d11c      	bne.n	800362a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff f842 	bl	800267e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fe:	2201      	movs	r2, #1
 8003600:	409a      	lsls	r2, r3
 8003602:	4b18      	ldr	r3, [pc, #96]	@ (8003664 <xTaskRemoveFromEventList+0xb4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4313      	orrs	r3, r2
 8003608:	4a16      	ldr	r2, [pc, #88]	@ (8003664 <xTaskRemoveFromEventList+0xb4>)
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4a13      	ldr	r2, [pc, #76]	@ (8003668 <xTaskRemoveFromEventList+0xb8>)
 800361a:	441a      	add	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	3304      	adds	r3, #4
 8003620:	4619      	mov	r1, r3
 8003622:	4610      	mov	r0, r2
 8003624:	f7fe ffce 	bl	80025c4 <vListInsertEnd>
 8003628:	e005      	b.n	8003636 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	3318      	adds	r3, #24
 800362e:	4619      	mov	r1, r3
 8003630:	480e      	ldr	r0, [pc, #56]	@ (800366c <xTaskRemoveFromEventList+0xbc>)
 8003632:	f7fe ffc7 	bl	80025c4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800363a:	4b0d      	ldr	r3, [pc, #52]	@ (8003670 <xTaskRemoveFromEventList+0xc0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003640:	429a      	cmp	r2, r3
 8003642:	d905      	bls.n	8003650 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003644:	2301      	movs	r3, #1
 8003646:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003648:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <xTaskRemoveFromEventList+0xc4>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e001      	b.n	8003654 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003654:	697b      	ldr	r3, [r7, #20]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200004f4 	.word	0x200004f4
 8003664:	200004d4 	.word	0x200004d4
 8003668:	200003d0 	.word	0x200003d0
 800366c:	2000048c 	.word	0x2000048c
 8003670:	200003cc 	.word	0x200003cc
 8003674:	200004e0 	.word	0x200004e0

08003678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003680:	4b06      	ldr	r3, [pc, #24]	@ (800369c <vTaskInternalSetTimeOutState+0x24>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <vTaskInternalSetTimeOutState+0x28>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	605a      	str	r2, [r3, #4]
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	200004e4 	.word	0x200004e4
 80036a0:	200004d0 	.word	0x200004d0

080036a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	613b      	str	r3, [r7, #16]
}
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10b      	bne.n	80036ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	60fb      	str	r3, [r7, #12]
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop
 80036e8:	e7fd      	b.n	80036e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80036ea:	f000 fb65 	bl	8003db8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003764 <xTaskCheckForTimeOut+0xc0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003706:	d102      	bne.n	800370e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003708:	2300      	movs	r3, #0
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	e023      	b.n	8003756 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b15      	ldr	r3, [pc, #84]	@ (8003768 <xTaskCheckForTimeOut+0xc4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d007      	beq.n	800372a <xTaskCheckForTimeOut+0x86>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	429a      	cmp	r2, r3
 8003722:	d302      	bcc.n	800372a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003724:	2301      	movs	r3, #1
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	e015      	b.n	8003756 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	429a      	cmp	r2, r3
 8003732:	d20b      	bcs.n	800374c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	1ad2      	subs	r2, r2, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff99 	bl	8003678 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	e004      	b.n	8003756 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003752:	2301      	movs	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003756:	f000 fb61 	bl	8003e1c <vPortExitCritical>

	return xReturn;
 800375a:	69fb      	ldr	r3, [r7, #28]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3720      	adds	r7, #32
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200004d0 	.word	0x200004d0
 8003768:	200004e4 	.word	0x200004e4

0800376c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003770:	4b03      	ldr	r3, [pc, #12]	@ (8003780 <vTaskMissedYield+0x14>)
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	200004e0 	.word	0x200004e0

08003784 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800378c:	f000 f852 	bl	8003834 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003790:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <prvIdleTask+0x28>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d9f9      	bls.n	800378c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003798:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <prvIdleTask+0x2c>)
 800379a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037a8:	e7f0      	b.n	800378c <prvIdleTask+0x8>
 80037aa:	bf00      	nop
 80037ac:	200003d0 	.word	0x200003d0
 80037b0:	e000ed04 	.word	0xe000ed04

080037b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037ba:	2300      	movs	r3, #0
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	e00c      	b.n	80037da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4a12      	ldr	r2, [pc, #72]	@ (8003814 <prvInitialiseTaskLists+0x60>)
 80037cc:	4413      	add	r3, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe fecb 	bl	800256a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3301      	adds	r3, #1
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b06      	cmp	r3, #6
 80037de:	d9ef      	bls.n	80037c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037e0:	480d      	ldr	r0, [pc, #52]	@ (8003818 <prvInitialiseTaskLists+0x64>)
 80037e2:	f7fe fec2 	bl	800256a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037e6:	480d      	ldr	r0, [pc, #52]	@ (800381c <prvInitialiseTaskLists+0x68>)
 80037e8:	f7fe febf 	bl	800256a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037ec:	480c      	ldr	r0, [pc, #48]	@ (8003820 <prvInitialiseTaskLists+0x6c>)
 80037ee:	f7fe febc 	bl	800256a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037f2:	480c      	ldr	r0, [pc, #48]	@ (8003824 <prvInitialiseTaskLists+0x70>)
 80037f4:	f7fe feb9 	bl	800256a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037f8:	480b      	ldr	r0, [pc, #44]	@ (8003828 <prvInitialiseTaskLists+0x74>)
 80037fa:	f7fe feb6 	bl	800256a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037fe:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <prvInitialiseTaskLists+0x78>)
 8003800:	4a05      	ldr	r2, [pc, #20]	@ (8003818 <prvInitialiseTaskLists+0x64>)
 8003802:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003804:	4b0a      	ldr	r3, [pc, #40]	@ (8003830 <prvInitialiseTaskLists+0x7c>)
 8003806:	4a05      	ldr	r2, [pc, #20]	@ (800381c <prvInitialiseTaskLists+0x68>)
 8003808:	601a      	str	r2, [r3, #0]
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200003d0 	.word	0x200003d0
 8003818:	2000045c 	.word	0x2000045c
 800381c:	20000470 	.word	0x20000470
 8003820:	2000048c 	.word	0x2000048c
 8003824:	200004a0 	.word	0x200004a0
 8003828:	200004b8 	.word	0x200004b8
 800382c:	20000484 	.word	0x20000484
 8003830:	20000488 	.word	0x20000488

08003834 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800383a:	e019      	b.n	8003870 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800383c:	f000 fabc 	bl	8003db8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003840:	4b10      	ldr	r3, [pc, #64]	@ (8003884 <prvCheckTasksWaitingTermination+0x50>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3304      	adds	r3, #4
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe ff16 	bl	800267e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003852:	4b0d      	ldr	r3, [pc, #52]	@ (8003888 <prvCheckTasksWaitingTermination+0x54>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3b01      	subs	r3, #1
 8003858:	4a0b      	ldr	r2, [pc, #44]	@ (8003888 <prvCheckTasksWaitingTermination+0x54>)
 800385a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800385c:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <prvCheckTasksWaitingTermination+0x58>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3b01      	subs	r3, #1
 8003862:	4a0a      	ldr	r2, [pc, #40]	@ (800388c <prvCheckTasksWaitingTermination+0x58>)
 8003864:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003866:	f000 fad9 	bl	8003e1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f810 	bl	8003890 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003870:	4b06      	ldr	r3, [pc, #24]	@ (800388c <prvCheckTasksWaitingTermination+0x58>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e1      	bne.n	800383c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200004a0 	.word	0x200004a0
 8003888:	200004cc 	.word	0x200004cc
 800388c:	200004b4 	.word	0x200004b4

08003890 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	334c      	adds	r3, #76	@ 0x4c
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fd87 	bl	80043b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d108      	bne.n	80038be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fc2f 	bl	8004114 <vPortFree>
				vPortFree( pxTCB );
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fc2c 	bl	8004114 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038bc:	e019      	b.n	80038f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d103      	bne.n	80038d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fc23 	bl	8004114 <vPortFree>
	}
 80038ce:	e010      	b.n	80038f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d00b      	beq.n	80038f2 <prvDeleteTCB+0x62>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	60fb      	str	r3, [r7, #12]
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	e7fd      	b.n	80038ee <prvDeleteTCB+0x5e>
	}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003902:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <prvResetNextTaskUnblockTime+0x38>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d104      	bne.n	8003916 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800390c:	4b0a      	ldr	r3, [pc, #40]	@ (8003938 <prvResetNextTaskUnblockTime+0x3c>)
 800390e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003912:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003914:	e008      	b.n	8003928 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003916:	4b07      	ldr	r3, [pc, #28]	@ (8003934 <prvResetNextTaskUnblockTime+0x38>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a04      	ldr	r2, [pc, #16]	@ (8003938 <prvResetNextTaskUnblockTime+0x3c>)
 8003926:	6013      	str	r3, [r2, #0]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	20000484 	.word	0x20000484
 8003938:	200004ec 	.word	0x200004ec

0800393c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003942:	4b0b      	ldr	r3, [pc, #44]	@ (8003970 <xTaskGetSchedulerState+0x34>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800394a:	2301      	movs	r3, #1
 800394c:	607b      	str	r3, [r7, #4]
 800394e:	e008      	b.n	8003962 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003950:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <xTaskGetSchedulerState+0x38>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d102      	bne.n	800395e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003958:	2302      	movs	r3, #2
 800395a:	607b      	str	r3, [r7, #4]
 800395c:	e001      	b.n	8003962 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800395e:	2300      	movs	r3, #0
 8003960:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003962:	687b      	ldr	r3, [r7, #4]
	}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	200004d8 	.word	0x200004d8
 8003974:	200004f4 	.word	0x200004f4

08003978 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d070      	beq.n	8003a70 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800398e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a7c <xTaskPriorityDisinherit+0x104>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	429a      	cmp	r2, r3
 8003996:	d00b      	beq.n	80039b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	60fb      	str	r3, [r7, #12]
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	e7fd      	b.n	80039ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10b      	bne.n	80039d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	60bb      	str	r3, [r7, #8]
}
 80039ca:	bf00      	nop
 80039cc:	bf00      	nop
 80039ce:	e7fd      	b.n	80039cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d4:	1e5a      	subs	r2, r3, #1
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d044      	beq.n	8003a70 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d140      	bne.n	8003a70 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	3304      	adds	r3, #4
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fe43 	bl	800267e <uxListRemove>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d115      	bne.n	8003a2a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a02:	491f      	ldr	r1, [pc, #124]	@ (8003a80 <xTaskPriorityDisinherit+0x108>)
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xTaskPriorityDisinherit+0xb2>
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a18:	2201      	movs	r2, #1
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	4b18      	ldr	r3, [pc, #96]	@ (8003a84 <xTaskPriorityDisinherit+0x10c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4013      	ands	r3, r2
 8003a26:	4a17      	ldr	r2, [pc, #92]	@ (8003a84 <xTaskPriorityDisinherit+0x10c>)
 8003a28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a36:	f1c3 0207 	rsb	r2, r3, #7
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	2201      	movs	r2, #1
 8003a44:	409a      	lsls	r2, r3
 8003a46:	4b0f      	ldr	r3, [pc, #60]	@ (8003a84 <xTaskPriorityDisinherit+0x10c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a84 <xTaskPriorityDisinherit+0x10c>)
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4a08      	ldr	r2, [pc, #32]	@ (8003a80 <xTaskPriorityDisinherit+0x108>)
 8003a5e:	441a      	add	r2, r3
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f7fe fdac 	bl	80025c4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a70:	697b      	ldr	r3, [r7, #20]
	}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	200003cc 	.word	0x200003cc
 8003a80:	200003d0 	.word	0x200003d0
 8003a84:	200004d4 	.word	0x200004d4

08003a88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a92:	4b29      	ldr	r3, [pc, #164]	@ (8003b38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a98:	4b28      	ldr	r3, [pc, #160]	@ (8003b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe fded 	bl	800267e <uxListRemove>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003aaa:	4b24      	ldr	r3, [pc, #144]	@ (8003b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43da      	mvns	r2, r3
 8003ab8:	4b21      	ldr	r3, [pc, #132]	@ (8003b40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4013      	ands	r3, r2
 8003abe:	4a20      	ldr	r2, [pc, #128]	@ (8003b40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ac0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ac8:	d10a      	bne.n	8003ae0 <prvAddCurrentTaskToDelayedList+0x58>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	481a      	ldr	r0, [pc, #104]	@ (8003b44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003ada:	f7fe fd73 	bl	80025c4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ade:	e026      	b.n	8003b2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ae8:	4b14      	ldr	r3, [pc, #80]	@ (8003b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d209      	bcs.n	8003b0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003af8:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b0f      	ldr	r3, [pc, #60]	@ (8003b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f7fe fd81 	bl	800260c <vListInsert>
}
 8003b0a:	e010      	b.n	8003b2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f7fe fd77 	bl	800260c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d202      	bcs.n	8003b2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003b28:	4a09      	ldr	r2, [pc, #36]	@ (8003b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	6013      	str	r3, [r2, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200004d0 	.word	0x200004d0
 8003b3c:	200003cc 	.word	0x200003cc
 8003b40:	200004d4 	.word	0x200004d4
 8003b44:	200004b8 	.word	0x200004b8
 8003b48:	20000488 	.word	0x20000488
 8003b4c:	20000484 	.word	0x20000484
 8003b50:	200004ec 	.word	0x200004ec

08003b54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3b04      	subs	r3, #4
 8003b64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3b04      	subs	r3, #4
 8003b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f023 0201 	bic.w	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3b04      	subs	r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b84:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb8 <pxPortInitialiseStack+0x64>)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3b14      	subs	r3, #20
 8003b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3b04      	subs	r3, #4
 8003b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f06f 0202 	mvn.w	r2, #2
 8003ba2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3b20      	subs	r3, #32
 8003ba8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	08003bbd 	.word	0x08003bbd

08003bbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003bc6:	4b13      	ldr	r3, [pc, #76]	@ (8003c14 <prvTaskExitError+0x58>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bce:	d00b      	beq.n	8003be8 <prvTaskExitError+0x2c>
	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	60fb      	str	r3, [r7, #12]
}
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
 8003be6:	e7fd      	b.n	8003be4 <prvTaskExitError+0x28>
	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	60bb      	str	r3, [r7, #8]
}
 8003bfa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003bfc:	bf00      	nop
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0fc      	beq.n	8003bfe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	2000000c 	.word	0x2000000c
	...

08003c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c20:	4b07      	ldr	r3, [pc, #28]	@ (8003c40 <pxCurrentTCBConst2>)
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	6808      	ldr	r0, [r1, #0]
 8003c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2a:	f380 8809 	msr	PSP, r0
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f04f 0000 	mov.w	r0, #0
 8003c36:	f380 8811 	msr	BASEPRI, r0
 8003c3a:	4770      	bx	lr
 8003c3c:	f3af 8000 	nop.w

08003c40 <pxCurrentTCBConst2>:
 8003c40:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop

08003c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003c48:	4808      	ldr	r0, [pc, #32]	@ (8003c6c <prvPortStartFirstTask+0x24>)
 8003c4a:	6800      	ldr	r0, [r0, #0]
 8003c4c:	6800      	ldr	r0, [r0, #0]
 8003c4e:	f380 8808 	msr	MSP, r0
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f380 8814 	msr	CONTROL, r0
 8003c5a:	b662      	cpsie	i
 8003c5c:	b661      	cpsie	f
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	df00      	svc	0
 8003c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c6a:	bf00      	nop
 8003c6c:	e000ed08 	.word	0xe000ed08

08003c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c76:	4b47      	ldr	r3, [pc, #284]	@ (8003d94 <xPortStartScheduler+0x124>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a47      	ldr	r2, [pc, #284]	@ (8003d98 <xPortStartScheduler+0x128>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d10b      	bne.n	8003c98 <xPortStartScheduler+0x28>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c98:	4b3e      	ldr	r3, [pc, #248]	@ (8003d94 <xPortStartScheduler+0x124>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a3f      	ldr	r2, [pc, #252]	@ (8003d9c <xPortStartScheduler+0x12c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10b      	bne.n	8003cba <xPortStartScheduler+0x4a>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	613b      	str	r3, [r7, #16]
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	e7fd      	b.n	8003cb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cba:	4b39      	ldr	r3, [pc, #228]	@ (8003da0 <xPortStartScheduler+0x130>)
 8003cbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	22ff      	movs	r2, #255	@ 0xff
 8003cca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4b31      	ldr	r3, [pc, #196]	@ (8003da4 <xPortStartScheduler+0x134>)
 8003ce0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ce2:	4b31      	ldr	r3, [pc, #196]	@ (8003da8 <xPortStartScheduler+0x138>)
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ce8:	e009      	b.n	8003cfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003cea:	4b2f      	ldr	r3, [pc, #188]	@ (8003da8 <xPortStartScheduler+0x138>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8003da8 <xPortStartScheduler+0x138>)
 8003cf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d06:	2b80      	cmp	r3, #128	@ 0x80
 8003d08:	d0ef      	beq.n	8003cea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d0a:	4b27      	ldr	r3, [pc, #156]	@ (8003da8 <xPortStartScheduler+0x138>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f1c3 0307 	rsb	r3, r3, #7
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d00b      	beq.n	8003d2e <xPortStartScheduler+0xbe>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	60bb      	str	r3, [r7, #8]
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003da8 <xPortStartScheduler+0x138>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	4a1c      	ldr	r2, [pc, #112]	@ (8003da8 <xPortStartScheduler+0x138>)
 8003d36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d38:	4b1b      	ldr	r3, [pc, #108]	@ (8003da8 <xPortStartScheduler+0x138>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d40:	4a19      	ldr	r2, [pc, #100]	@ (8003da8 <xPortStartScheduler+0x138>)
 8003d42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d4c:	4b17      	ldr	r3, [pc, #92]	@ (8003dac <xPortStartScheduler+0x13c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a16      	ldr	r2, [pc, #88]	@ (8003dac <xPortStartScheduler+0x13c>)
 8003d52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d58:	4b14      	ldr	r3, [pc, #80]	@ (8003dac <xPortStartScheduler+0x13c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a13      	ldr	r2, [pc, #76]	@ (8003dac <xPortStartScheduler+0x13c>)
 8003d5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003d62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d64:	f000 f8da 	bl	8003f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d68:	4b11      	ldr	r3, [pc, #68]	@ (8003db0 <xPortStartScheduler+0x140>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003d6e:	f000 f8f9 	bl	8003f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d72:	4b10      	ldr	r3, [pc, #64]	@ (8003db4 <xPortStartScheduler+0x144>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a0f      	ldr	r2, [pc, #60]	@ (8003db4 <xPortStartScheduler+0x144>)
 8003d78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003d7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d7e:	f7ff ff63 	bl	8003c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d82:	f7ff fb8b 	bl	800349c <vTaskSwitchContext>
	prvTaskExitError();
 8003d86:	f7ff ff19 	bl	8003bbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	e000ed00 	.word	0xe000ed00
 8003d98:	410fc271 	.word	0x410fc271
 8003d9c:	410fc270 	.word	0x410fc270
 8003da0:	e000e400 	.word	0xe000e400
 8003da4:	200004f8 	.word	0x200004f8
 8003da8:	200004fc 	.word	0x200004fc
 8003dac:	e000ed20 	.word	0xe000ed20
 8003db0:	2000000c 	.word	0x2000000c
 8003db4:	e000ef34 	.word	0xe000ef34

08003db8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	607b      	str	r3, [r7, #4]
}
 8003dd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003dd2:	4b10      	ldr	r3, [pc, #64]	@ (8003e14 <vPortEnterCritical+0x5c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8003e14 <vPortEnterCritical+0x5c>)
 8003dda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e14 <vPortEnterCritical+0x5c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d110      	bne.n	8003e06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003de4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <vPortEnterCritical+0x60>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <vPortEnterCritical+0x4e>
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	603b      	str	r3, [r7, #0]
}
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
 8003e04:	e7fd      	b.n	8003e02 <vPortEnterCritical+0x4a>
	}
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	2000000c 	.word	0x2000000c
 8003e18:	e000ed04 	.word	0xe000ed04

08003e1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e22:	4b12      	ldr	r3, [pc, #72]	@ (8003e6c <vPortExitCritical+0x50>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <vPortExitCritical+0x26>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	607b      	str	r3, [r7, #4]
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	e7fd      	b.n	8003e3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003e42:	4b0a      	ldr	r3, [pc, #40]	@ (8003e6c <vPortExitCritical+0x50>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	4a08      	ldr	r2, [pc, #32]	@ (8003e6c <vPortExitCritical+0x50>)
 8003e4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e4c:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <vPortExitCritical+0x50>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <vPortExitCritical+0x44>
 8003e54:	2300      	movs	r3, #0
 8003e56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	2000000c 	.word	0x2000000c

08003e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e70:	f3ef 8009 	mrs	r0, PSP
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <pxCurrentTCBConst>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	f01e 0f10 	tst.w	lr, #16
 8003e80:	bf08      	it	eq
 8003e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8a:	6010      	str	r0, [r2, #0]
 8003e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003e94:	f380 8811 	msr	BASEPRI, r0
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f7ff fafc 	bl	800349c <vTaskSwitchContext>
 8003ea4:	f04f 0000 	mov.w	r0, #0
 8003ea8:	f380 8811 	msr	BASEPRI, r0
 8003eac:	bc09      	pop	{r0, r3}
 8003eae:	6819      	ldr	r1, [r3, #0]
 8003eb0:	6808      	ldr	r0, [r1, #0]
 8003eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb6:	f01e 0f10 	tst.w	lr, #16
 8003eba:	bf08      	it	eq
 8003ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ec0:	f380 8809 	msr	PSP, r0
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	f3af 8000 	nop.w

08003ed0 <pxCurrentTCBConst>:
 8003ed0:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop

08003ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	607b      	str	r3, [r7, #4]
}
 8003ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ef2:	f7ff fa19 	bl	8003328 <xTaskIncrementTick>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003efc:	4b06      	ldr	r3, [pc, #24]	@ (8003f18 <SysTick_Handler+0x40>)
 8003efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	2300      	movs	r3, #0
 8003f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	f383 8811 	msr	BASEPRI, r3
}
 8003f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	e000ed04 	.word	0xe000ed04

08003f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f20:	4b0b      	ldr	r3, [pc, #44]	@ (8003f50 <vPortSetupTimerInterrupt+0x34>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f26:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <vPortSetupTimerInterrupt+0x38>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f58 <vPortSetupTimerInterrupt+0x3c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a0a      	ldr	r2, [pc, #40]	@ (8003f5c <vPortSetupTimerInterrupt+0x40>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	099b      	lsrs	r3, r3, #6
 8003f38:	4a09      	ldr	r2, [pc, #36]	@ (8003f60 <vPortSetupTimerInterrupt+0x44>)
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f3e:	4b04      	ldr	r3, [pc, #16]	@ (8003f50 <vPortSetupTimerInterrupt+0x34>)
 8003f40:	2207      	movs	r2, #7
 8003f42:	601a      	str	r2, [r3, #0]
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	e000e010 	.word	0xe000e010
 8003f54:	e000e018 	.word	0xe000e018
 8003f58:	20000000 	.word	0x20000000
 8003f5c:	10624dd3 	.word	0x10624dd3
 8003f60:	e000e014 	.word	0xe000e014

08003f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003f74 <vPortEnableVFP+0x10>
 8003f68:	6801      	ldr	r1, [r0, #0]
 8003f6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003f6e:	6001      	str	r1, [r0, #0]
 8003f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003f72:	bf00      	nop
 8003f74:	e000ed88 	.word	0xe000ed88

08003f78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	@ 0x28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f84:	f7ff f924 	bl	80031d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f88:	4b5c      	ldr	r3, [pc, #368]	@ (80040fc <pvPortMalloc+0x184>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f90:	f000 f924 	bl	80041dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f94:	4b5a      	ldr	r3, [pc, #360]	@ (8004100 <pvPortMalloc+0x188>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f040 8095 	bne.w	80040cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01e      	beq.n	8003fe6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003fa8:	2208      	movs	r2, #8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4413      	add	r3, r2
 8003fae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d015      	beq.n	8003fe6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f023 0307 	bic.w	r3, r3, #7
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <pvPortMalloc+0x6e>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	617b      	str	r3, [r7, #20]
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	e7fd      	b.n	8003fe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d06f      	beq.n	80040cc <pvPortMalloc+0x154>
 8003fec:	4b45      	ldr	r3, [pc, #276]	@ (8004104 <pvPortMalloc+0x18c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d86a      	bhi.n	80040cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ff6:	4b44      	ldr	r3, [pc, #272]	@ (8004108 <pvPortMalloc+0x190>)
 8003ff8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ffa:	4b43      	ldr	r3, [pc, #268]	@ (8004108 <pvPortMalloc+0x190>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004000:	e004      	b.n	800400c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	429a      	cmp	r2, r3
 8004014:	d903      	bls.n	800401e <pvPortMalloc+0xa6>
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f1      	bne.n	8004002 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800401e:	4b37      	ldr	r3, [pc, #220]	@ (80040fc <pvPortMalloc+0x184>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004024:	429a      	cmp	r2, r3
 8004026:	d051      	beq.n	80040cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2208      	movs	r2, #8
 800402e:	4413      	add	r3, r2
 8004030:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	1ad2      	subs	r2, r2, r3
 8004042:	2308      	movs	r3, #8
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	429a      	cmp	r2, r3
 8004048:	d920      	bls.n	800408c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800404a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4413      	add	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <pvPortMalloc+0xfc>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	613b      	str	r3, [r7, #16]
}
 800406e:	bf00      	nop
 8004070:	bf00      	nop
 8004072:	e7fd      	b.n	8004070 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	1ad2      	subs	r2, r2, r3
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004086:	69b8      	ldr	r0, [r7, #24]
 8004088:	f000 f90a 	bl	80042a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800408c:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <pvPortMalloc+0x18c>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	4a1b      	ldr	r2, [pc, #108]	@ (8004104 <pvPortMalloc+0x18c>)
 8004098:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800409a:	4b1a      	ldr	r3, [pc, #104]	@ (8004104 <pvPortMalloc+0x18c>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b1b      	ldr	r3, [pc, #108]	@ (800410c <pvPortMalloc+0x194>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d203      	bcs.n	80040ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040a6:	4b17      	ldr	r3, [pc, #92]	@ (8004104 <pvPortMalloc+0x18c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a18      	ldr	r2, [pc, #96]	@ (800410c <pvPortMalloc+0x194>)
 80040ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	4b13      	ldr	r3, [pc, #76]	@ (8004100 <pvPortMalloc+0x188>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80040c2:	4b13      	ldr	r3, [pc, #76]	@ (8004110 <pvPortMalloc+0x198>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3301      	adds	r3, #1
 80040c8:	4a11      	ldr	r2, [pc, #68]	@ (8004110 <pvPortMalloc+0x198>)
 80040ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80040cc:	f7ff f88e 	bl	80031ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <pvPortMalloc+0x17a>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	60fb      	str	r3, [r7, #12]
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	e7fd      	b.n	80040ee <pvPortMalloc+0x176>
	return pvReturn;
 80040f2:	69fb      	ldr	r3, [r7, #28]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3728      	adds	r7, #40	@ 0x28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20004108 	.word	0x20004108
 8004100:	2000411c 	.word	0x2000411c
 8004104:	2000410c 	.word	0x2000410c
 8004108:	20004100 	.word	0x20004100
 800410c:	20004110 	.word	0x20004110
 8004110:	20004114 	.word	0x20004114

08004114 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d04f      	beq.n	80041c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004126:	2308      	movs	r3, #8
 8004128:	425b      	negs	r3, r3
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4413      	add	r3, r2
 800412e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	4b25      	ldr	r3, [pc, #148]	@ (80041d0 <vPortFree+0xbc>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10b      	bne.n	800415a <vPortFree+0x46>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	60fb      	str	r3, [r7, #12]
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	e7fd      	b.n	8004156 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00b      	beq.n	800417a <vPortFree+0x66>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	60bb      	str	r3, [r7, #8]
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	e7fd      	b.n	8004176 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	4b14      	ldr	r3, [pc, #80]	@ (80041d0 <vPortFree+0xbc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4013      	ands	r3, r2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01e      	beq.n	80041c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11a      	bne.n	80041c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	4b0e      	ldr	r3, [pc, #56]	@ (80041d0 <vPortFree+0xbc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	43db      	mvns	r3, r3
 800419a:	401a      	ands	r2, r3
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80041a0:	f7ff f816 	bl	80031d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	4b0a      	ldr	r3, [pc, #40]	@ (80041d4 <vPortFree+0xc0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4413      	add	r3, r2
 80041ae:	4a09      	ldr	r2, [pc, #36]	@ (80041d4 <vPortFree+0xc0>)
 80041b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041b2:	6938      	ldr	r0, [r7, #16]
 80041b4:	f000 f874 	bl	80042a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80041b8:	4b07      	ldr	r3, [pc, #28]	@ (80041d8 <vPortFree+0xc4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3301      	adds	r3, #1
 80041be:	4a06      	ldr	r2, [pc, #24]	@ (80041d8 <vPortFree+0xc4>)
 80041c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80041c2:	f7ff f813 	bl	80031ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80041c6:	bf00      	nop
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	2000411c 	.word	0x2000411c
 80041d4:	2000410c 	.word	0x2000410c
 80041d8:	20004118 	.word	0x20004118

080041dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80041e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80041e8:	4b27      	ldr	r3, [pc, #156]	@ (8004288 <prvHeapInit+0xac>)
 80041ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00c      	beq.n	8004210 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3307      	adds	r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0307 	bic.w	r3, r3, #7
 8004202:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	4a1f      	ldr	r2, [pc, #124]	@ (8004288 <prvHeapInit+0xac>)
 800420c:	4413      	add	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004214:	4a1d      	ldr	r2, [pc, #116]	@ (800428c <prvHeapInit+0xb0>)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800421a:	4b1c      	ldr	r3, [pc, #112]	@ (800428c <prvHeapInit+0xb0>)
 800421c:	2200      	movs	r2, #0
 800421e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	4413      	add	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004228:	2208      	movs	r2, #8
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0307 	bic.w	r3, r3, #7
 8004236:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a15      	ldr	r2, [pc, #84]	@ (8004290 <prvHeapInit+0xb4>)
 800423c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800423e:	4b14      	ldr	r3, [pc, #80]	@ (8004290 <prvHeapInit+0xb4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2200      	movs	r2, #0
 8004244:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004246:	4b12      	ldr	r3, [pc, #72]	@ (8004290 <prvHeapInit+0xb4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	1ad2      	subs	r2, r2, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800425c:	4b0c      	ldr	r3, [pc, #48]	@ (8004290 <prvHeapInit+0xb4>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a0a      	ldr	r2, [pc, #40]	@ (8004294 <prvHeapInit+0xb8>)
 800426a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a09      	ldr	r2, [pc, #36]	@ (8004298 <prvHeapInit+0xbc>)
 8004272:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004274:	4b09      	ldr	r3, [pc, #36]	@ (800429c <prvHeapInit+0xc0>)
 8004276:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800427a:	601a      	str	r2, [r3, #0]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	20000500 	.word	0x20000500
 800428c:	20004100 	.word	0x20004100
 8004290:	20004108 	.word	0x20004108
 8004294:	20004110 	.word	0x20004110
 8004298:	2000410c 	.word	0x2000410c
 800429c:	2000411c 	.word	0x2000411c

080042a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80042a8:	4b28      	ldr	r3, [pc, #160]	@ (800434c <prvInsertBlockIntoFreeList+0xac>)
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	e002      	b.n	80042b4 <prvInsertBlockIntoFreeList+0x14>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d8f7      	bhi.n	80042ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	4413      	add	r3, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d108      	bne.n	80042e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	441a      	add	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	441a      	add	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d118      	bne.n	8004328 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <prvInsertBlockIntoFreeList+0xb0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d00d      	beq.n	800431e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	441a      	add	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	e008      	b.n	8004330 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800431e:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <prvInsertBlockIntoFreeList+0xb0>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	e003      	b.n	8004330 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	d002      	beq.n	800433e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20004100 	.word	0x20004100
 8004350:	20004108 	.word	0x20004108

08004354 <memset>:
 8004354:	4402      	add	r2, r0
 8004356:	4603      	mov	r3, r0
 8004358:	4293      	cmp	r3, r2
 800435a:	d100      	bne.n	800435e <memset+0xa>
 800435c:	4770      	bx	lr
 800435e:	f803 1b01 	strb.w	r1, [r3], #1
 8004362:	e7f9      	b.n	8004358 <memset+0x4>

08004364 <__libc_init_array>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4d0d      	ldr	r5, [pc, #52]	@ (800439c <__libc_init_array+0x38>)
 8004368:	4c0d      	ldr	r4, [pc, #52]	@ (80043a0 <__libc_init_array+0x3c>)
 800436a:	1b64      	subs	r4, r4, r5
 800436c:	10a4      	asrs	r4, r4, #2
 800436e:	2600      	movs	r6, #0
 8004370:	42a6      	cmp	r6, r4
 8004372:	d109      	bne.n	8004388 <__libc_init_array+0x24>
 8004374:	4d0b      	ldr	r5, [pc, #44]	@ (80043a4 <__libc_init_array+0x40>)
 8004376:	4c0c      	ldr	r4, [pc, #48]	@ (80043a8 <__libc_init_array+0x44>)
 8004378:	f000 f8dc 	bl	8004534 <_init>
 800437c:	1b64      	subs	r4, r4, r5
 800437e:	10a4      	asrs	r4, r4, #2
 8004380:	2600      	movs	r6, #0
 8004382:	42a6      	cmp	r6, r4
 8004384:	d105      	bne.n	8004392 <__libc_init_array+0x2e>
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	f855 3b04 	ldr.w	r3, [r5], #4
 800438c:	4798      	blx	r3
 800438e:	3601      	adds	r6, #1
 8004390:	e7ee      	b.n	8004370 <__libc_init_array+0xc>
 8004392:	f855 3b04 	ldr.w	r3, [r5], #4
 8004396:	4798      	blx	r3
 8004398:	3601      	adds	r6, #1
 800439a:	e7f2      	b.n	8004382 <__libc_init_array+0x1e>
 800439c:	080045e4 	.word	0x080045e4
 80043a0:	080045e4 	.word	0x080045e4
 80043a4:	080045e4 	.word	0x080045e4
 80043a8:	080045e8 	.word	0x080045e8

080043ac <__retarget_lock_acquire_recursive>:
 80043ac:	4770      	bx	lr

080043ae <__retarget_lock_release_recursive>:
 80043ae:	4770      	bx	lr

080043b0 <_reclaim_reent>:
 80043b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004468 <_reclaim_reent+0xb8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4283      	cmp	r3, r0
 80043b6:	b570      	push	{r4, r5, r6, lr}
 80043b8:	4604      	mov	r4, r0
 80043ba:	d053      	beq.n	8004464 <_reclaim_reent+0xb4>
 80043bc:	69c3      	ldr	r3, [r0, #28]
 80043be:	b31b      	cbz	r3, 8004408 <_reclaim_reent+0x58>
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	b163      	cbz	r3, 80043de <_reclaim_reent+0x2e>
 80043c4:	2500      	movs	r5, #0
 80043c6:	69e3      	ldr	r3, [r4, #28]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	5959      	ldr	r1, [r3, r5]
 80043cc:	b9b1      	cbnz	r1, 80043fc <_reclaim_reent+0x4c>
 80043ce:	3504      	adds	r5, #4
 80043d0:	2d80      	cmp	r5, #128	@ 0x80
 80043d2:	d1f8      	bne.n	80043c6 <_reclaim_reent+0x16>
 80043d4:	69e3      	ldr	r3, [r4, #28]
 80043d6:	4620      	mov	r0, r4
 80043d8:	68d9      	ldr	r1, [r3, #12]
 80043da:	f000 f855 	bl	8004488 <_free_r>
 80043de:	69e3      	ldr	r3, [r4, #28]
 80043e0:	6819      	ldr	r1, [r3, #0]
 80043e2:	b111      	cbz	r1, 80043ea <_reclaim_reent+0x3a>
 80043e4:	4620      	mov	r0, r4
 80043e6:	f000 f84f 	bl	8004488 <_free_r>
 80043ea:	69e3      	ldr	r3, [r4, #28]
 80043ec:	689d      	ldr	r5, [r3, #8]
 80043ee:	b15d      	cbz	r5, 8004408 <_reclaim_reent+0x58>
 80043f0:	4629      	mov	r1, r5
 80043f2:	4620      	mov	r0, r4
 80043f4:	682d      	ldr	r5, [r5, #0]
 80043f6:	f000 f847 	bl	8004488 <_free_r>
 80043fa:	e7f8      	b.n	80043ee <_reclaim_reent+0x3e>
 80043fc:	680e      	ldr	r6, [r1, #0]
 80043fe:	4620      	mov	r0, r4
 8004400:	f000 f842 	bl	8004488 <_free_r>
 8004404:	4631      	mov	r1, r6
 8004406:	e7e1      	b.n	80043cc <_reclaim_reent+0x1c>
 8004408:	6961      	ldr	r1, [r4, #20]
 800440a:	b111      	cbz	r1, 8004412 <_reclaim_reent+0x62>
 800440c:	4620      	mov	r0, r4
 800440e:	f000 f83b 	bl	8004488 <_free_r>
 8004412:	69e1      	ldr	r1, [r4, #28]
 8004414:	b111      	cbz	r1, 800441c <_reclaim_reent+0x6c>
 8004416:	4620      	mov	r0, r4
 8004418:	f000 f836 	bl	8004488 <_free_r>
 800441c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800441e:	b111      	cbz	r1, 8004426 <_reclaim_reent+0x76>
 8004420:	4620      	mov	r0, r4
 8004422:	f000 f831 	bl	8004488 <_free_r>
 8004426:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004428:	b111      	cbz	r1, 8004430 <_reclaim_reent+0x80>
 800442a:	4620      	mov	r0, r4
 800442c:	f000 f82c 	bl	8004488 <_free_r>
 8004430:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004432:	b111      	cbz	r1, 800443a <_reclaim_reent+0x8a>
 8004434:	4620      	mov	r0, r4
 8004436:	f000 f827 	bl	8004488 <_free_r>
 800443a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800443c:	b111      	cbz	r1, 8004444 <_reclaim_reent+0x94>
 800443e:	4620      	mov	r0, r4
 8004440:	f000 f822 	bl	8004488 <_free_r>
 8004444:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004446:	b111      	cbz	r1, 800444e <_reclaim_reent+0x9e>
 8004448:	4620      	mov	r0, r4
 800444a:	f000 f81d 	bl	8004488 <_free_r>
 800444e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004450:	b111      	cbz	r1, 8004458 <_reclaim_reent+0xa8>
 8004452:	4620      	mov	r0, r4
 8004454:	f000 f818 	bl	8004488 <_free_r>
 8004458:	6a23      	ldr	r3, [r4, #32]
 800445a:	b11b      	cbz	r3, 8004464 <_reclaim_reent+0xb4>
 800445c:	4620      	mov	r0, r4
 800445e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004462:	4718      	bx	r3
 8004464:	bd70      	pop	{r4, r5, r6, pc}
 8004466:	bf00      	nop
 8004468:	20000010 	.word	0x20000010

0800446c <memcpy>:
 800446c:	440a      	add	r2, r1
 800446e:	4291      	cmp	r1, r2
 8004470:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004474:	d100      	bne.n	8004478 <memcpy+0xc>
 8004476:	4770      	bx	lr
 8004478:	b510      	push	{r4, lr}
 800447a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800447e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004482:	4291      	cmp	r1, r2
 8004484:	d1f9      	bne.n	800447a <memcpy+0xe>
 8004486:	bd10      	pop	{r4, pc}

08004488 <_free_r>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4605      	mov	r5, r0
 800448c:	2900      	cmp	r1, #0
 800448e:	d041      	beq.n	8004514 <_free_r+0x8c>
 8004490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004494:	1f0c      	subs	r4, r1, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	bfb8      	it	lt
 800449a:	18e4      	addlt	r4, r4, r3
 800449c:	f000 f83e 	bl	800451c <__malloc_lock>
 80044a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004518 <_free_r+0x90>)
 80044a2:	6813      	ldr	r3, [r2, #0]
 80044a4:	b933      	cbnz	r3, 80044b4 <_free_r+0x2c>
 80044a6:	6063      	str	r3, [r4, #4]
 80044a8:	6014      	str	r4, [r2, #0]
 80044aa:	4628      	mov	r0, r5
 80044ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044b0:	f000 b83a 	b.w	8004528 <__malloc_unlock>
 80044b4:	42a3      	cmp	r3, r4
 80044b6:	d908      	bls.n	80044ca <_free_r+0x42>
 80044b8:	6820      	ldr	r0, [r4, #0]
 80044ba:	1821      	adds	r1, r4, r0
 80044bc:	428b      	cmp	r3, r1
 80044be:	bf01      	itttt	eq
 80044c0:	6819      	ldreq	r1, [r3, #0]
 80044c2:	685b      	ldreq	r3, [r3, #4]
 80044c4:	1809      	addeq	r1, r1, r0
 80044c6:	6021      	streq	r1, [r4, #0]
 80044c8:	e7ed      	b.n	80044a6 <_free_r+0x1e>
 80044ca:	461a      	mov	r2, r3
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	b10b      	cbz	r3, 80044d4 <_free_r+0x4c>
 80044d0:	42a3      	cmp	r3, r4
 80044d2:	d9fa      	bls.n	80044ca <_free_r+0x42>
 80044d4:	6811      	ldr	r1, [r2, #0]
 80044d6:	1850      	adds	r0, r2, r1
 80044d8:	42a0      	cmp	r0, r4
 80044da:	d10b      	bne.n	80044f4 <_free_r+0x6c>
 80044dc:	6820      	ldr	r0, [r4, #0]
 80044de:	4401      	add	r1, r0
 80044e0:	1850      	adds	r0, r2, r1
 80044e2:	4283      	cmp	r3, r0
 80044e4:	6011      	str	r1, [r2, #0]
 80044e6:	d1e0      	bne.n	80044aa <_free_r+0x22>
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	6053      	str	r3, [r2, #4]
 80044ee:	4408      	add	r0, r1
 80044f0:	6010      	str	r0, [r2, #0]
 80044f2:	e7da      	b.n	80044aa <_free_r+0x22>
 80044f4:	d902      	bls.n	80044fc <_free_r+0x74>
 80044f6:	230c      	movs	r3, #12
 80044f8:	602b      	str	r3, [r5, #0]
 80044fa:	e7d6      	b.n	80044aa <_free_r+0x22>
 80044fc:	6820      	ldr	r0, [r4, #0]
 80044fe:	1821      	adds	r1, r4, r0
 8004500:	428b      	cmp	r3, r1
 8004502:	bf04      	itt	eq
 8004504:	6819      	ldreq	r1, [r3, #0]
 8004506:	685b      	ldreq	r3, [r3, #4]
 8004508:	6063      	str	r3, [r4, #4]
 800450a:	bf04      	itt	eq
 800450c:	1809      	addeq	r1, r1, r0
 800450e:	6021      	streq	r1, [r4, #0]
 8004510:	6054      	str	r4, [r2, #4]
 8004512:	e7ca      	b.n	80044aa <_free_r+0x22>
 8004514:	bd38      	pop	{r3, r4, r5, pc}
 8004516:	bf00      	nop
 8004518:	2000425c 	.word	0x2000425c

0800451c <__malloc_lock>:
 800451c:	4801      	ldr	r0, [pc, #4]	@ (8004524 <__malloc_lock+0x8>)
 800451e:	f7ff bf45 	b.w	80043ac <__retarget_lock_acquire_recursive>
 8004522:	bf00      	nop
 8004524:	20004258 	.word	0x20004258

08004528 <__malloc_unlock>:
 8004528:	4801      	ldr	r0, [pc, #4]	@ (8004530 <__malloc_unlock+0x8>)
 800452a:	f7ff bf40 	b.w	80043ae <__retarget_lock_release_recursive>
 800452e:	bf00      	nop
 8004530:	20004258 	.word	0x20004258

08004534 <_init>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	bf00      	nop
 8004538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453a:	bc08      	pop	{r3}
 800453c:	469e      	mov	lr, r3
 800453e:	4770      	bx	lr

08004540 <_fini>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr
